import fs from "fs";
import path from "path";
import FormData from "form-data";
import { appContext } from "../context.js";
import { ZaloApiError } from "../index.js";
import {
  encodeAES,
  decodeAES,
  getFileSize,
  getImageMetaData,
  makeURL,
  request
} from "../utils.js";

export function uploadToZCloudFactory(api) {
  const uploadUrlBase = "https://tt-files-wpa.chat.zalo.me/api/message/photo_original/upload";

  return async function uploadToZCloud(filePaths) {
    if (!appContext.secretKey || !appContext.imei || !appContext.cookie || !appContext.userAgent) {
      throw new ZaloApiError("Thi·∫øu th√¥ng tin app context");
    }

    if (!filePaths?.length) throw new ZaloApiError("Thi·∫øu filePaths");

    const results = [];

    for (const filePath of filePaths) {
      if (!fs.existsSync(filePath)) throw new ZaloApiError(`Kh√¥ng t√¨m th·∫•y file: ${filePath}`);

      const extFile = path.extname(filePath).slice(1).toLowerCase();
      const originalFileName = path.basename(filePath);
      const safeFileName = originalFileName
        .normalize("NFKD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^\w.\-]/g, "_");

      const totalSize = await getFileSize(filePath);
      let fileData = { fileName: safeFileName, totalSize };

      if (["jpg", "jpeg", "png", "webp"].includes(extFile)) {
        const imageData = await getImageMetaData(filePath);
        fileData = { ...imageData, fileName: safeFileName, totalSize };
      }

      const params = {
        imei: appContext.imei,
        jxl: 0,
        isE2EE: 0,
        clientId: Date.now(),
        fileName: safeFileName,
        totalSize,
        chunkId: 1,
        totalChunk: 1,
        fileType: "photo"
      };

      console.log("üß™ Params g·ª≠i l√™n:", JSON.stringify(params, null, 2));

      const encryptedParams = encodeAES(appContext.secretKey, JSON.stringify(params));
      if (!encryptedParams) throw new ZaloApiError("M√£ h√≥a params th·∫•t b·∫°i");

      const form = new FormData();
      form.append("chunkContent", fs.createReadStream(filePath), {
        filename: safeFileName,
        contentType: "application/octet-stream"
      });

      const uploadUrl = makeURL(uploadUrlBase, {
        zpw_ver: 657,
        zpw_type: 30,
        params: encryptedParams,
        type: 2
      });

      console.log("üì§ B·∫Øt ƒë·∫ßu upload ZCloud:", {
        fileName: safeFileName,
        totalSize,
        uploadUrl
      });

      try {
        const response = await request(uploadUrl, {
          method: "POST",
          headers: {
            ...form.getHeaders(),
            cookie: appContext.cookie,
            "user-agent": appContext.userAgent,
            origin: "https://chat.zalo.me"
          },
          body: form
        });

        const text = await response.text();
        console.log("üì• Ph·∫£n h·ªìi th√¥ (raw text):", text);

        let result;
        try {
          result = JSON.parse(text);
        } catch (jsonErr) {
          console.error("‚ùå Kh√¥ng ph·∫£i JSON:", jsonErr.message);
          throw new ZaloApiError("Ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
        }

        if (result.error_code !== 0) {
          throw new ZaloApiError(result.error_message || "L·ªói kh√¥ng x√°c ƒë·ªãnh", result.error_code);
        }

        let data = result.data;
        if (typeof data === "string") {
            try {
              const decrypted = decodeAES(appContext.secretKey, data);
              console.log("üîì Ph·∫£n h·ªìi ƒë√£ gi·∫£i m√£:", decrypted);
              const parsed = JSON.parse(decrypted);
          
              // N·∫øu sau khi gi·∫£i m√£ v·∫´n c√≥ error_code th√¨ tr·∫£ l·ªói ra lu√¥n
              if (parsed?.error_code && parsed?.error_code !== 0) {
                throw new ZaloApiError(parsed.error_message || "L·ªói sau khi gi·∫£i m√£", parsed.error_code);
              }
          
              data = parsed;
            } catch (err) {
              console.error("‚ùå Gi·∫£i m√£ th·∫•t b·∫°i:", err.message);
              throw new ZaloApiError("Gi·∫£i m√£ ph·∫£n h·ªìi th·∫•t b·∫°i");
            }
          }

        const fileUrl = data?.fileUrl || data?.normalUrl;
        if (!fileUrl) {
          console.warn("‚ö†Ô∏è Kh√¥ng c√≥ fileUrl trong ph·∫£n h·ªìi:", data);
          throw new ZaloApiError("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c fileUrl t·ª´ ph·∫£n h·ªìi");
        }

        const resultEntry = {
          ...fileData,
          fileType: "photo",
          fileUrl,
          width: data.width,
          height: data.height,
          photoId: data.photoId,
          fileId: data.fileId
        };

        console.log("‚úÖ Upload th√†nh c√¥ng:", resultEntry);
        results.push(resultEntry);

      } catch (err) {
        console.error(`‚ùå Upload th·∫•t b·∫°i cho file ${safeFileName}:`, err);
      }
    }

    return results;
  };
}
