import path from 'path';
import fs from 'fs';
import { getGlobalPrefix } from '../service.js';
import { removeMention } from '../../utils/format-util.js';
import { downloadFile, checkExstentionFileRemote } from '../../utils/util.js';
import { sendMessageWarningRequest, sendMessageCompleteRequest } from '../chat-zalo/chat-style/chat-style.js';

const RESOURCE_BASE_PATH = path.join(process.cwd(), 'assets', 'resources');

/**
 * Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
 */
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

/**
 * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa t√™n th∆∞ m·ª•c
 */
function isValidDirectory(dirName) {
  const fullPath = path.join(RESOURCE_BASE_PATH, dirName);
  return fs.existsSync(fullPath) && fs.statSync(fullPath).isDirectory();
}

/**
 * X·ª≠ l√Ω l·ªánh t·∫£i resource
 */
export async function handleDownloadResource(api, message, aliasCommand) {
  const prefix = getGlobalPrefix();
  const content = removeMention(message);
  const args = content.replace(`${prefix}${aliasCommand}`, "").trim().split("|");

  if (args.length < 2) {
    const object = {
      caption: `Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: ${prefix}${aliasCommand} [th∆∞ m·ª•c]|[t√™n file]|[link (n·∫øu Kh√¥ng reply)]`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  const [dirName, fileName, link] = args;

  if (!isValidDirectory(dirName)) {
    const object = {
      caption: `Th∆∞ m·ª•c "${dirName}" Kh√¥ng t·ªìn t·∫°i trong resource!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  let fileUrl = null;
  const quote = message.data?.quote;

  if (quote) {
    try {
      const parseMessage = JSON.parse(quote.attach);
      fileUrl = parseMessage?.href;
    } catch (error) {
      console.error("L·ªói khi parse quote:", error);
    }
  } else if (link) {
    fileUrl = link;
  }

  if (!fileUrl) {
    const object = {
      caption: `Vui l√≤ng cung c·∫•p link ho·∫∑c reply tin nh·∫Øn ch·ª©a file c·∫ßn t·∫£i!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  try {
    const ext = await checkExstentionFileRemote(fileUrl);
    const fullFileName = fileName.includes('.') ? fileName : `${fileName}.${ext}`;
    const savePath = path.join(RESOURCE_BASE_PATH, dirName, fullFileName);

    if (fs.existsSync(savePath)) {
      const object = {
        caption: `‚ùå File "${fullFileName}" ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c "${dirName}"!\nVui l√≤ng ch·ªçn t√™n file kh√°c.`,
      };
      await sendMessageWarningRequest(api, message, object, 30000);
      return;
    }

    ensureDirectoryExists(path.join(RESOURCE_BASE_PATH, dirName));
    await downloadFile(fileUrl, savePath);

    const object = {
      caption: `‚úÖ ƒê√£ t·∫£i v√† l∆∞u file th√†nh c√¥ng!\nüìÇ Th∆∞ m·ª•c: ${dirName}\nüìÑ T√™n file: ${fullFileName}`,
    };
    await sendMessageCompleteRequest(api, message, object, 30000);
  } catch (error) {
    console.error("L·ªói khi t·∫£i file:", error);
    const object = {
      caption: `‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i file. Vui l√≤ng th·ª≠ l·∫°i sau!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
  }
}

/**
 * X·ª≠ l√Ω l·ªánh x√≥a resource
 */
export async function handleDeleteResource(api, message, aliasCommand) {
  const prefix = getGlobalPrefix();
  const content = removeMention(message);
  const args = content.replace(`${prefix}${aliasCommand}`, "").trim().split("|");

  if (args.length < 2) {
    const object = {
      caption: `Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: ${prefix}${aliasCommand} [th∆∞ m·ª•c]|[t√™n file]`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  const [dirName, fileName] = args;

  if (!isValidDirectory(dirName)) {
    const object = {
      caption: `Th∆∞ m·ª•c "${dirName}" Kh√¥ng t·ªìn t·∫°i trong resource!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  const dirPath = path.join(RESOURCE_BASE_PATH, dirName);
  const files = fs.readdirSync(dirPath);
  const matchingFiles = files.filter(file => 
    file.toLowerCase().startsWith(fileName.toLowerCase())
  );

  if (matchingFiles.length === 0) {
    const object = {
      caption: `Kh√¥ng t√¨m th·∫•y file "${fileName}" trong th∆∞ m·ª•c "${dirName}"!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  try {
    for (const file of matchingFiles) {
      const filePath = path.join(dirPath, file);
      fs.unlinkSync(filePath);
    }

    const object = {
      caption: `‚úÖ ƒê√£ x√≥a ${matchingFiles.length} file th√†nh c√¥ng!\nüìÇ Th∆∞ m·ª•c: ${dirName}\nüìÑ C√°c file ƒë√£ x√≥a:\n${matchingFiles.join('\n')}`,
    };
    await sendMessageCompleteRequest(api, message, object, 30000);
  } catch (error) {
    console.error("L·ªói khi x√≥a file:", error);
    const object = {
      caption: `‚ùå ƒê√£ x·∫£y ra l·ªói khi x√≥a file. Vui l√≤ng th·ª≠ l·∫°i sau!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
  }
}
