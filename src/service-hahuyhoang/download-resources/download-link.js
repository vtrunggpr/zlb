import path from 'path';
import fs from 'fs';
import { getGlobalPrefix } from '../service.js';
import { removeMention } from '../../utils/format-util.js';
import { sendMessageWarningRequest, sendMessageCompleteRequest } from '../chat-zalo/chat-style/chat-style.js';

const RESOURCE_BASE_PATH = path.join(process.cwd(), 'assets', 'resources', 'voice');
const VOICE_JSON_PATH = path.join(RESOURCE_BASE_PATH, 'voice_links.json');

// Author : H√† Huy Ho√†ng
// Description: Pexels Image code by H H H BOT

// ƒê·∫£m b·∫£o th∆∞ m·ª•c v√† file JSON t·ªìn t·∫°i
function ensureVoiceJsonExists() {
  if (!fs.existsSync(RESOURCE_BASE_PATH)) {
    fs.mkdirSync(RESOURCE_BASE_PATH, { recursive: true });
  }
  if (!fs.existsSync(VOICE_JSON_PATH)) {
    fs.writeFileSync(VOICE_JSON_PATH, JSON.stringify({}, null, 2), 'utf8');
  }
}

// ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
function readVoiceJson() {
  ensureVoiceJsonExists();
  return JSON.parse(fs.readFileSync(VOICE_JSON_PATH, 'utf8'));
}

// Ghi d·ªØ li·ªáu v√†o file JSON
function writeVoiceJson(data) {
  fs.writeFileSync(VOICE_JSON_PATH, JSON.stringify(data, null, 2), 'utf8');
}

/**
 * X·ª≠ l√Ω l·ªánh l∆∞u link voice
 */
export async function handleSaveVoiceLink(api, message, aliasCommand) {
  const prefix = getGlobalPrefix();
  const content = removeMention(message);
  const args = content.replace(`${prefix}${aliasCommand}`, "").trim().split("|");

  if (args.length < 2) {
    const object = {
      caption: `Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: ${prefix}${aliasCommand} [th∆∞ m·ª•c l∆∞u]|[t√™n voice] v√† reply tin nh·∫Øn ch·ª©a link voice!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  const [folderName, fileName] = args;
  let fileUrl = null;
  const quote = message.data?.quote;

  if (quote) {
    try {
      const parseMessage = JSON.parse(quote.attach);
      fileUrl = parseMessage?.href;
    } catch (error) {
      console.error("L·ªói khi parse quote:", error);
    }
  }

  if (!fileUrl) {
    const object = {
      caption: `Vui l√≤ng reply tin nh·∫Øn ch·ª©a file voice c·∫ßn l∆∞u!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
    return;
  }

  try {
    const folderPath = path.join(RESOURCE_BASE_PATH, folderName);
    if (!fs.existsSync(folderPath)) {
      fs.mkdirSync(folderPath, { recursive: true });
    }
    const voiceData = readVoiceJson();
    if (!voiceData[folderName]) {
      voiceData[folderName] = {};
    }
    voiceData[folderName][fileName] = fileUrl;
    writeVoiceJson(voiceData);

    const object = {
      caption: `‚úÖ ƒê√£ l∆∞u link th√†nh c√¥ng!
üìÇ Th∆∞ m·ª•c: ${folderName}
üìÑ T√™n voice: ${fileName}
üîó Link: ${fileUrl}`,
    };
    await sendMessageCompleteRequest(api, message, object, 30000);
  } catch (error) {
    console.error("L·ªói khi l∆∞u link:", error);
    const object = {
      caption: `‚ùå ƒê√£ x·∫£y ra l·ªói khi l∆∞u link. Vui l√≤ng th·ª≠ l·∫°i sau!`,
    };
    await sendMessageWarningRequest(api, message, object, 30000);
  }
}
