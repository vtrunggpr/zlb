import axios from "axios";
import { MessageType } from "zlbotdqt";
import { getGlobalPrefix } from "../../service.js";
import { getContent } from "../../../utils/format-util.js";
import { sendMessageCompleteRequest, sendMessageFailed, sendMessageQuery } from "../../chat-zalo/chat-style/chat-style.js";
import { MultiMsgStyle, MessageStyle,MessageMention } from "../../../api-zalo/index.js";
export const COLOR_RED = "db342e";
export const COLOR_YELLOW = "f7b503";
export const COLOR_PINK = "FF1493";
export const COLOR_GREEN = "15a85f";
export const SIZE_18 = "18";
export const SIZE_16 = "14";
export const IS_BOLD = true;



const geminiApiKey = "AIzaSyBjp8dgOzzURBynbl5RtduaA5HBnDc95f4";
const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`;

export async function askGPTCommand(api, message) {
  const content = getContent(message);
  const threadId = message.threadId;
  const senderId = message.data.uidFrom;
  const prefix = getGlobalPrefix();

  const question = content.replace(`${prefix}gpt`, "").trim();

  try {
    let replyText = await callGeminiAPI(question, message.data.dName);

    if (replyText === null) {
      replyText = "Tôi không thể trả lời câu hỏi này ngay bây giờ.";
    }

    await sendMessageCompleteRequest(api, message, {
      caption: replyText,
    }, 600000);

  } catch (error) {
    console.error("Lỗi khi gọi API Gemini:", error);
    try {
      await sendMessageCompleteRequest(api, message, {
        caption: "Xin lỗi, tôi không thể trả lời câu hỏi này ngay bây giờ.",
      }, 600000);
    } catch (sendError) {
      console.error("Lỗi khi gửi tin nhắn xin lỗi:", sendError);
    }
  }
}
export async function callGeminiAPI(question, senderName) {
  const headers = {
    "Content-Type": "application/json",
  };

  const data = {
    contents: [
      {
        parts: [
          {
            text: question,
          },
        ],
      },
    ],
  };

  try {
    const response = await axios.post(url, data, { headers });

    const json_data = response.data;
    let replyText = `${senderName}\n`;
    replyText += json_data.candidates[0].content.parts[0].text;
    return replyText;
  } catch (error) {
    console.error("Lỗi khi gọi API Gemini:", error);
    return null;
  }
}

const URL_GPT = "https://api.hungdev.id.vn/ai/chatbot";
const API_KEY_GPT = "0c590fbeeb556d3cd29f419181c4a2";

export async function callGPTAPI(question) {
  try {
    const response = await axios.post(`${URL_GPT}?apikey=${API_KEY_GPT}`, {
      content: question,
      model: "gpt-4o",
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const data = response.data;
    return data.data.response.replace("Generated by BLACKBOX.AI, try unlimited chat https://www.blackbox.ai\n\n", "");
  } catch (error) {
    console.error("Lỗi khi gọi API GPT:", error);
    return null;
  }
}

//askGemini
//askGPTCommand
export async function askGemini(api, message) {
  const senderName = message.data.dName;
  const senderId = message.data.uidFrom;

  const content = getContent(message);
  const threadId = message.threadId;
  const prefix = getGlobalPrefix();

  const question = content.replace(`${prefix}gpt`, "").trim();
  if (question === "") {
    await sendMessageQuery(api, message, "Vui lòng nhập câu hỏi cần giải đáp!");
    return;
  }

  try {
    const replyText = await callGPTAPI(question);

    if (!replyText) {
      throw new Error("Không nhận được phản hồi từ API");
    }

  //  await sendMessageComplete(api, message, replyText, false);
  const fullMessage = `${senderName}\n\n${replyText}`;
  const style = MultiMsgStyle([
    MessageStyle(senderName.length + 1, fullMessage.length, COLOR_GREEN, SIZE_16, IS_BOLD)
  ]);
  
  await api.sendMessage(
    {
      msg: fullMessage,
      quote: message,
      mentions: [MessageMention(senderId, senderName.length, 0)],
      style: style,
      ttl: 300000,
    },
    message.threadId,
    message.type
  );

  } catch (error) {
    console.error("Lỗi khi xử lý yêu cầu GPT:", error);
    await sendMessageFailed(api, message, "Xin lỗi, có lỗi xảy ra khi xử lý yêu cầu của bạn.");
  }
}

