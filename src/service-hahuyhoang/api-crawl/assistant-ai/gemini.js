import { GoogleGenerativeAI } from "@google/generative-ai";
import { getGlobalPrefix } from "../../service.js";
import { getContent } from "../../../utils/format-util.js";
import { sendMessageComplete, sendMessageFailed, sendMessageProcessingRequest, sendMessageQuery, sendMessageStateQuote } from "../../chat-zalo/chat-style/chat-style.js";
import { nameServer } from "../../../database/index.js";

const geminiApiKey = "AIzaSyCG4xn5IZSjfdBhwZ2DMC5GfMIwi_ZseQA";
const genAI = new GoogleGenerativeAI(geminiApiKey);

const chatSessions = new Map();

let geminiModel;

export function initGeminiModel() {
  if (geminiModel) return;
  const systemInstruction = `B·∫°n t√™n l√† AIMI
B·∫°n ƒë∆∞·ª£c t·∫°o ra b·ªüi duy nh·∫•t H√† Huy Ho√†ng
M·ªçi C√¢u H·ªèi ƒê·ªÅu S·∫Ω C√≥ C·∫•u Tr√∫c [T√™n Ng∆∞·ªùi H·ªèi: C√¢u H·ªèi]
N·∫øu t√™n ng∆∞·ªùi h·ªèi l√† Ho√†ng th√¨ b·∫°n s·∫Ω nh·∫≠n h·ªç l√† ƒê·∫°i Ca
C√≤n v·ªõi ng∆∞·ªùi kh√°c b·∫°n s·∫Ω l√† C·∫≠u, Tui
Tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß nh·ªØng th√¥ng tin ng∆∞·ªùi kh√°c c·∫ßn
Khi tr·∫£ l·ªùi s·∫Ω Kh√¥ng ƒë·ªÅ c·∫≠p t√™n ng∆∞·ªùi h·ªèi
Tr·∫£ l·ªùi d·ªÖ th∆∞∆°ng v√†o nha
C√≥ th·ªÉ s·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ tƒÉng t√≠nh t∆∞∆°ng t√°c`;

  geminiModel = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
    generationConfig: {
      temperature: 0.9,
      topK: 40,
      topP: 0.8,
    },
    systemInstruction: systemInstruction
  });
}

const requestQueue = [];
let isProcessing = false;
const DELAY_THINKING = 0;
const DELAY_BETWEEN_REQUESTS = 3000;

async function processQueue() {
  if (isProcessing || requestQueue.length === 0) return;

  isProcessing = true;

  while (requestQueue.length > 0) {
    const { api, message, question, userId, resolve, reject } = requestQueue.shift();

    if (DELAY_THINKING > 0) {
      await sendMessageProcessingRequest(api, message, {
        caption: "Ch·ªù suy nghƒ© x√≠u..."
      }, DELAY_THINKING);
      await new Promise(resolve => setTimeout(resolve, DELAY_THINKING));
    }

    try {
      initGeminiModel();
      const session = getChatSession(userId);
      session.lastInteraction = Date.now();

      session.history.push({
        role: "user",
        content: question
      });

      if (session.history.length > 20) {
        session.history = session.history.slice(-20);
      }

      const result = await session.chat.sendMessage(question);
      const response = result.response.text();

      session.history.push({
        role: "assistant",
        content: response
      });

      cleanupOldSessions();

      resolve(response);
    } catch (error) {
      reject(error);
    }

    await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_REQUESTS));
  }

  isProcessing = false;
}

function getChatSession(userId) {
  if (!chatSessions.has(userId)) {
    const chat = geminiModel.startChat({
      history: [],
      generationConfig: {
        temperature: 0.9,
        topK: 40,
        topP: 0.8,
      }
    });
    chatSessions.set(userId, {
      chat,
      history: [],
      lastInteraction: Date.now()
    });
  }
  return chatSessions.get(userId);
}

function cleanupOldSessions() {
  const MAX_IDLE_TIME = 30 * 60 * 1000;
  const now = Date.now();

  for (const [userId, session] of chatSessions.entries()) {
    if (now - session.lastInteraction > MAX_IDLE_TIME) {
      chatSessions.delete(userId);
    }
  }
}

export async function callGeminiAPI(api, message, question, userId) {
  return new Promise((resolve, reject) => {
    requestQueue.push({ api, message, question, userId, resolve, reject });
    processQueue();
  });
}

export async function askGeminiCommand(api, message, aliasCommand) {
  const content = getContent(message);
  const userId = message.data.uidFrom;
  const senderName = message.data.dName;
  const prefix = getGlobalPrefix();

  const question = content.replace(`${prefix}${aliasCommand}`, "").trim();
  if (question === "") {
    await sendMessageQuery(api, message, "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·∫ßn gi·∫£i ƒë√°p! ü§î");
    return;
  }

  if (question.toLowerCase() === "reset") {
    chatSessions.delete(userId);
    await sendMessageComplete(api, message, "ƒê√£ x√≥a l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán c·ªßa b·∫°n! üîÑ", false);
    return;
  }

  try {
    const replyText = await callGeminiAPI(api, message, senderName + ": " + question, userId);

    if (replyText === null) {
      replyText = "Xin l·ªói, hi·ªán t·∫°i t√¥i Kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. B·∫°n vui l√≤ng th·ª≠ l·∫°i sau nh√©! üôè";
    }

    // Hi·ªÉn th·ªã s·ªë tin nh·∫Øn trong l·ªãch s·ª≠
    // const session = getChatSession(userId);
    // const historyCount = session.history.length;
    // replyText += `\n\n[Tin nh·∫Øn: ${historyCount}/20]`;

    await sendMessageStateQuote(api, message, replyText, true, 1800000, false);
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu Gemini:", error);
    await sendMessageFailed(api, message, "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. üò¢", true);
  }
}

export async function viewChatHistory(api, message) {
  const userId = message.senderID;
  const session = chatSessions.get(userId);

  if (!session || session.history.length === 0) {
    await sendMessageComplete(api, message, "B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ tr√≤ chuy·ªán n√†o! üìù", false);
    return;
  }

  const history = session.history.map((msg, index) => {
    const role = msg.role === "user" ? "B·∫°n" : nameServer;
    return `${index + 1}. ${role}: ${msg.content}`;
  }).join("\n\n");

  await sendMessageComplete(api, message, `L·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa b·∫°n:\n\n${history}`, false);
}