import { createCanvas, loadImage } from "canvas";
import path from "path";
import fs from "fs/promises";
import { nameServer } from "../../../database/index.js";
import { updatePlayerBalance, getPlayerBalance } from "../../../database/player.js";
import { formatCurrency, parseGameAmount } from "../../../utils/format-util.js";
import { checkBeforeJoinGame } from "../index.js";
import { clearImagePath } from "../../canvas/index.js";
import { convertSVGtoPNG } from "./svg-converter.js";

// L∆∞u tr·∫°ng th√°i c√°c v√°n c·ªù ƒëang di·ªÖn ra
const activeGames = new Map();

// L∆∞u tr·∫°ng th√°i c√°c l·ªùi th√°ch ƒë·∫•u ƒëang ch·ªù
const pendingChallenges = new Map();

const ACCEPT_TIMEOUT = 60000; // 1 ph√∫t ch·ªù accept

// Th√™m c√°c h·∫±ng s·ªë cho qu√¢n c·ªù
const PIECES = {
  // Qu√¢n ƒë·ªè
  rK: { type: 'K', color: 'red', name: 'T∆∞·ªõng' },
  rA: { type: 'A', color: 'red', name: 'Sƒ©' },
  rB: { type: 'B', color: 'red', name: 'T∆∞·ª£ng' },
  rN: { type: 'N', color: 'red', name: 'Ng·ª±a' },
  rR: { type: 'R', color: 'red', name: 'Xe' },
  rC: { type: 'C', color: 'red', name: 'Ph√°o' },
  rP: { type: 'P', color: 'red', name: 'T·ªët' },

  // Qu√¢n ƒëen  
  bK: { type: 'K', color: 'black', name: 'T∆∞·ªõng' },
  bA: { type: 'A', color: 'black', name: 'Sƒ©' },
  bB: { type: 'B', color: 'black', name: 'T∆∞·ª£ng' },
  bN: { type: 'N', color: 'black', name: 'Ng·ª±a' },
  bR: { type: 'R', color: 'black', name: 'Xe' },
  bC: { type: 'C', color: 'black', name: 'Ph√°o' },
  bP: { type: 'P', color: 'black', name: 'T·ªët' }
};

// Cache cho h√¨nh ·∫£nh qu√¢n c·ªù
const pieceImageCache = new Map();

// H√†m load h√¨nh ·∫£nh qu√¢n c·ªù
async function loadPieceImage(pieceCode) {
  if (pieceImageCache.has(pieceCode)) {
    return pieceImageCache.get(pieceCode);
  }

  try {
    const svgPath = path.join(
      process.cwd(),
      "src",
      "service-hahuyhoang",
      "game-service", 
      "co-tuong",
      "pieces",
      `${pieceCode}.svg`
    );

    const pngBuffer = await convertSVGtoPNG(svgPath);
    if (pngBuffer) {
      const image = await loadImage(pngBuffer);
      pieceImageCache.set(pieceCode, image);
      return image;
    }
  } catch (error) {
    console.error(`L·ªói load h√¨nh ·∫£nh qu√¢n c·ªù ${pieceCode}:`, error);
  }
  return null;
}

// H√†m kh·ªüi t·∫°o b√†n c·ªù
function initializeBoard() {
  const board = Array(10).fill(null).map(() => Array(9).fill(null));
  
  // ƒê·∫∑t qu√¢n ƒë·ªè (ph√≠a d∆∞·ªõi)
  board[9][0] = 'rR'; board[9][8] = 'rR'; // Xe
  board[9][1] = 'rN'; board[9][7] = 'rN'; // Ng·ª±a
  board[9][2] = 'rB'; board[9][6] = 'rB'; // T∆∞·ª£ng
  board[9][3] = 'rA'; board[9][5] = 'rA'; // Sƒ©
  board[9][4] = 'rK'; // T∆∞·ªõng
  board[7][1] = 'rC'; board[7][7] = 'rC'; // Ph√°o
  board[6][0] = 'rP'; board[6][2] = 'rP'; board[6][4] = 'rP'; // T·ªët
  board[6][6] = 'rP'; board[6][8] = 'rP';

  // ƒê·∫∑t qu√¢n ƒëen (ph√≠a tr√™n)
  board[0][0] = 'bR'; board[0][8] = 'bR'; // Xe
  board[0][1] = 'bN'; board[0][7] = 'bN'; // Ng·ª±a  
  board[0][2] = 'bB'; board[0][6] = 'bB'; // T∆∞·ª£ng
  board[0][3] = 'bA'; board[0][5] = 'bA'; // Sƒ©
  board[0][4] = 'bK'; // T∆∞·ªõng
  board[2][1] = 'bC'; board[2][7] = 'bC'; // Ph√°o
  board[3][0] = 'bP'; board[3][2] = 'bP'; board[3][4] = 'bP'; // T·ªët
  board[3][6] = 'bP'; board[3][8] = 'bP';

  return board;
}

// H√†m chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô t·ª´ k√Ω hi·ªáu sang s·ªë
function parsePosition(pos) {
  const col = pos.charCodeAt(0) - 'a'.charCodeAt(0);
  const row = 9 - (parseInt(pos[1]) - 1);
  return { row, col };
}

// H√†m ki·ªÉm tra n∆∞·ªõc ƒëi h·ª£p l·ªá
function makeMove(game, fromPos, toPos, playerColor) {
  try {
    const from = parsePosition(fromPos);
    const to = parsePosition(toPos);

    // Ki·ªÉm tra t·ªça ƒë·ªô c√≥ h·ª£p l·ªá
    if (!isValidPosition(from) || !isValidPosition(to)) {
      return { valid: false, message: "T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá" };
    }

    const piece = game.board[from.row][from.col];
    
    // Ki·ªÉm tra c√≥ qu√¢n c·ªù t·∫°i v·ªã tr√≠ xu·∫•t ph√°t
    if (!piece) {
      return { valid: false, message: "Kh√¥ng c√≥ qu√¢n c·ªù t·∫°i v·ªã tr√≠ xu·∫•t ph√°t" };
    }

    // Ki·ªÉm tra qu√¢n c·ªù c√≥ ph·∫£i c·ªßa ng∆∞·ªùi ch∆°i kh√¥ng
    if (piece[0] !== playerColor[0]) {
      return { valid: false, message: "ƒê√¢y kh√¥ng ph·∫£i qu√¢n c·ªù c·ªßa b·∫°n" };
    }

    // Ki·ªÉm tra lu·∫≠t di chuy·ªÉn c·ªßa t·ª´ng lo·∫°i qu√¢n
    if (!isValidMove(game.board, from, to, piece)) {
      return { valid: false, message: "N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá" };
    }

    // Th·ª±c hi·ªán n∆∞·ªõc ƒëi
    const capturedPiece = game.board[to.row][to.col];
    game.board[to.row][to.col] = piece;
    game.board[from.row][from.col] = null;

    // Ki·ªÉm tra t·ª± chi·∫øu
    if (isInCheck(game.board, playerColor)) {
      // Ho√†n t√°c n∆∞·ªõc ƒëi
      game.board[from.row][from.col] = piece;
      game.board[to.row][to.col] = capturedPiece;
      return { valid: false, message: "N∆∞·ªõc ƒëi n√†y s·∫Ω ƒë·ªÉ t∆∞·ªõng b·ªã chi·∫øu" };
    }

    return { valid: true };
  } catch (error) {
    console.error("L·ªói ki·ªÉm tra n∆∞·ªõc ƒëi:", error);
    return { valid: false, message: "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra n∆∞·ªõc ƒëi" };
  }
}

// H√†m ki·ªÉm tra t·ªça ƒë·ªô c√≥ n·∫±m trong b√†n c·ªù
function isValidPosition({ row, col }) {
  return row >= 0 && row < 10 && col >= 0 && col < 9;
}

// H√†m t√¨m game theo ng∆∞·ªùi ch∆°i
function findGameByPlayer(playerId) {
  for (const game of activeGames.values()) {
    if (game.players.red === playerId || game.players.black === playerId) {
      return game;
    }
  }
  return null;
}

// H√†m ki·ªÉm tra ng∆∞·ªùi ch∆°i c√≥ ƒëang trong game
function isPlayerInGame(playerId) {
  return findGameByPlayer(playerId) !== null;
}

// H√†m l·∫•y t√™n ng∆∞·ªùi ch∆°i
async function getPlayerName(api, playerId) {
  try {
    const userInfo = await api.getUserInfo(playerId);
    return userInfo?.name || playerId;
  } catch {
    return playerId;
  }
}

export async function handleCoTuongCommand(api, message, groupSettings, commandMain) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings))) return;
  const { threadId, senderId, type } = message;
  const prefix = groupSettings?.prefix || getGlobalPrefix();
  const parts = message.body.slice(prefix.length).trim().split(" ");
  const command = parts[1].toLowerCase();

  switch (command) {
    case "invite":
    case "thachdau":
      if (parts.length < 3) {
        await api.sendMessage(
          {
            msg: `${nameServer}: S·ª≠ d·ª•ng: ${prefix}${commandMain} ${command} <s·ªë ti·ªÅn> @tag
V√≠ d·ª•: ${prefix}${commandMain} ${command} 10000 @nguoichoi`,
            quote: message,
          },
          threadId,
          type
        );
        return;
      }
      await handleChallenge(api, message, parts);
      break;

    case "move":
    case "datco":
      if (parts.length < 3) {
        await api.sendMessage(
          {
            msg: `${nameServer}: S·ª≠ d·ª•ng: ${prefix}${commandMain} ${command} <t·ªça ƒë·ªô g·ªëc> <t·ªça ƒë·ªô ƒë√≠ch>
V√≠ d·ª•: ${prefix}${commandMain} ${command} e2 e4`,
            quote: message,
          },
          threadId,
          type
        );
        return;
      }
      await handleMove(api, message, parts);
      break;

    case "surrender":
    case "dauhang":
      await handleSurrender(api, message);
      break;
  }
}

async function handleChallenge(api, message, parts) {
  const { threadId, senderId, type } = message;
  const mentions = message.mentions;

  // Ki·ªÉm tra mention
  if (!mentions || Object.keys(mentions).length !== 1) {
    await api.sendMessage({ msg: `${nameServer}: Vui l√≤ng ch·ªâ th√°ch ƒë·∫•u 1 ng∆∞·ªùi ch∆°i`, quote: message }, threadId, type);
    return;
  }

  const opponentId = Object.keys(mentions)[0];

  // Ki·ªÉm tra kh√¥ng th√°ch ƒë·∫•u ch√≠nh m√¨nh
  if (opponentId === senderId) {
    await api.sendMessage({ msg: `${nameServer}: B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh`, quote: message }, threadId, type);
    return;
  }

  // Ki·ªÉm tra ng∆∞·ªùi ch∆°i kh√¥ng trong game kh√°c
  if (isPlayerInGame(senderId) || isPlayerInGame(opponentId)) {
    await api.sendMessage({ msg: `${nameServer}: M·ªôt trong hai ng∆∞·ªùi ch∆°i ƒëang trong v√°n c·ªù kh√°c`, quote: message }, threadId, type);
    return;
  }

  // Parse v√† ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c
  const balance = await getPlayerBalance(senderId);
  let betAmount;
  try {
    betAmount = parseGameAmount(parts[2], balance.balance);
    if (betAmount.lt(1000)) {
      await api.sendMessage({ msg: `${nameServer}: S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 1,000 VNƒê`, quote: message }, threadId, type);
      return;
    }
  } catch (error) {
    await api.sendMessage({ msg: `${nameServer}: ${error.message}`, quote: message }, threadId, type);
    return;
  }

  // Ki·ªÉm tra s·ªë d∆∞
  if (new Big(balance.balance).lt(betAmount)) {
    await api.sendMessage(
      { msg: `${nameServer}: S·ªë d∆∞ kh√¥ng ƒë·ªß. B·∫°n ch·ªâ c√≥ ${formatCurrency(balance.balance)} VNƒê`, quote: message },
      threadId,
      type
    );
    return;
  }

  // T·∫°o challenge m·ªõi
  const challenge = {
    challenger: senderId,
    opponent: opponentId,
    betAmount,
    threadId,
    timestamp: Date.now(),
    messageId: null,
  };

  // G·ª≠i th√¥ng b√°o th√°ch ƒë·∫•u
  const challengeMsg = await api.sendMessage(
    {
      msg: `${nameServer}: üéÆ Th√°ch ƒë·∫•u c·ªù t∆∞·ªõng!
üë§ ${message.data.dName} th√°ch ƒë·∫•u ${mentions[opponentId]}
üí∞ Ti·ªÅn c∆∞·ª£c: ${formatCurrency(betAmount)} VNƒê
‚è≥ Th·ªùi gian ch·∫•p nh·∫≠n: 60 gi√¢y
üëâ Th·∫£ reaction b·∫•t k·ª≥ ƒë·ªÉ ch·∫•p nh·∫≠n!`,
      mentions: [
        { pos: 2, uid: senderId, len: message.data.dName.length },
        { pos: message.data.dName.length + 13, uid: opponentId, len: mentions[opponentId].length },
      ],
    },
    threadId,
    type
  );

  challenge.messageId = challengeMsg.messageID;
  pendingChallenges.set(challengeMsg.messageID, challenge);

  // Set timeout ƒë·ªÉ x√≥a challenge n·∫øu kh√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n
  setTimeout(() => {
    if (pendingChallenges.has(challengeMsg.messageID)) {
      pendingChallenges.delete(challengeMsg.messageID);
      api.sendMessage({ msg: `${nameServer}: ‚åõ H·∫øt th·ªùi gian ch·∫•p nh·∫≠n th√°ch ƒë·∫•u` }, threadId, type);
    }
  }, ACCEPT_TIMEOUT);
}

// X·ª≠ l√Ω khi c√≥ ng∆∞·ªùi reaction ƒë·ªÉ accept
export async function handleReaction(api, reaction) {
  const { messageID, threadID, userID } = reaction;

  // Ki·ªÉm tra c√≥ ph·∫£i tin nh·∫Øn th√°ch ƒë·∫•u kh√¥ng
  const challenge = pendingChallenges.get(messageID);
  if (!challenge) return;

  // Ki·ªÉm tra ng∆∞·ªùi react c√≥ ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u kh√¥ng
  if (userID !== challenge.opponent) return;

  // Ki·ªÉm tra th·ªùi gian c√≤n hi·ªáu l·ª±c
  if (Date.now() - challenge.timestamp > ACCEPT_TIMEOUT) {
    pendingChallenges.delete(messageID);
    await api.sendMessage({ msg: `${nameServer}: ‚åõ Th√°ch ƒë·∫•u ƒë√£ h·∫øt h·∫°n` }, threadID, "message");
    return;
  }

  // Ki·ªÉm tra s·ªë d∆∞ c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u
  const opponentBalance = await getPlayerBalance(challenge.opponent);
  if (new Big(opponentBalance.balance).lt(challenge.betAmount)) {
    await api.sendMessage({ msg: `${nameServer}: S·ªë d∆∞ c·ªßa ƒë·ªëi th·ªß kh√¥ng ƒë·ªß ƒë·ªÉ ch·∫•p nh·∫≠n th√°ch ƒë·∫•u` }, threadID, "message");
    return;
  }

  // X√≥a challenge kh·ªèi danh s√°ch ch·ªù
  pendingChallenges.delete(messageID);

  // T·∫°o v√°n c·ªù m·ªõi
  const gameId = `${threadID}_${Date.now()}`;
  const game = {
    id: gameId,
    threadId: threadID,
    players: {
      red: challenge.challenger,
      black: challenge.opponent,
    },
    betAmount: challenge.betAmount,
    board: initializeBoard(),
    currentTurn: "red", // Qu√¢n ƒë·ªè ƒëi tr∆∞·ªõc
    moveHistory: [],
    lastMoveTime: Date.now(),
  };

  activeGames.set(gameId, game);

  // V·∫Ω v√† g·ª≠i b√†n c·ªù
  const boardImage = await drawBoard(game);
  await api.sendMessage(
    {
      msg: `${nameServer}: üéÆ V√°n c·ªù b·∫Øt ƒë·∫ßu!
üî¥ Qu√¢n ƒë·ªè: ${await getPlayerName(api, challenge.challenger)}
‚ö´ Qu√¢n ƒëen: ${await getPlayerName(api, challenge.opponent)}
üí∞ Ti·ªÅn c∆∞·ª£c: ${formatCurrency(challenge.betAmount)} VNƒê
‚è≥ L∆∞·ª£t ƒëi: Qu√¢n ƒë·ªè`,
      attachments: [boardImage],
    },
    threadID,
    "message"
  );

  await clearImagePath(boardImage);
}

async function handleMove(api, message, parts) {
  const { threadId, senderId, type } = message;

  // Ki·ªÉm tra ng∆∞·ªùi ch∆°i c√≥ ƒëang trong game kh√¥ng
  const game = findGameByPlayer(senderId);
  if (!game) {
    await api.sendMessage({ msg: `${nameServer}: B·∫°n kh√¥ng trong v√°n c·ªù n√†o`, quote: message }, threadId, type);
    return;
  }

  // Ki·ªÉm tra c√≥ ph·∫£i l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i kh√¥ng
  const playerColor = game.players.red === senderId ? "red" : "black";
  if (game.currentTurn !== playerColor) {
    await api.sendMessage({ msg: `${nameServer}: Ch∆∞a ƒë·∫øn l∆∞·ª£t c·ªßa b·∫°n`, quote: message }, threadId, type);
    return;
  }

  const [fromPos, toPos] = [parts[1].toLowerCase(), parts[2].toLowerCase()];

  // Validate v√† th·ª±c hi·ªán n∆∞·ªõc ƒëi
  try {
    const moveResult = makeMove(game, fromPos, toPos, playerColor);
    if (!moveResult.valid) {
      await api.sendMessage({ msg: `${nameServer}: ${moveResult.message}`, quote: message }, threadId, type);
      return;
    }

    // C·∫≠p nh·∫≠t game state
    game.currentTurn = game.currentTurn === "red" ? "black" : "red";
    game.lastMoveTime = Date.now();
    game.moveHistory.push({ from: fromPos, to: toPos, player: playerColor });

    // Ki·ªÉm tra chi·∫øu t∆∞·ªõng/h·∫øt c·ªù
    const gameStatus = checkGameStatus(game);

    // V·∫Ω v√† g·ª≠i b√†n c·ªù m·ªõi
    const boardImage = await drawBoard(game);
    let statusMsg = `${nameServer}: üéÆ N∆∞·ªõc ƒëi: ${fromPos} ‚Üí ${toPos}
‚è≥ L∆∞·ª£t ƒëi: ${game.currentTurn === "red" ? "Qu√¢n ƒë·ªè" : "Qu√¢n ƒëen"}`;

    if (gameStatus.isCheck) {
      statusMsg += "\n‚ö†Ô∏è CHI·∫æU T∆Ø·ªöNG!";
    }

    if (gameStatus.isCheckmate) {
      // K·∫øt th√∫c game
      const winner = playerColor;
      await endGame(api, game, winner);
      statusMsg += `\nüéâ CHI·∫æU B√ç! ${await getPlayerName(api, game.players[winner])} th·∫Øng!`;
    }

    await api.sendMessage(
      {
        msg: statusMsg,
        attachments: [boardImage],
      },
      threadId,
      type
    );

    await clearImagePath(boardImage);
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω n∆∞·ªõc ƒëi:", error);
    await api.sendMessage({ msg: `${nameServer}: C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán n∆∞·ªõc ƒëi`, quote: message }, threadId, type);
  }
}

async function handleSurrender(api, message) {
  const { threadId, senderId, type } = message;

  const game = findGameByPlayer(senderId);
  if (!game) {
    await api.sendMessage({ msg: `${nameServer}: B·∫°n kh√¥ng trong v√°n c·ªù n√†o`, quote: message }, threadId, type);
    return;
  }

  const winner = game.players.red === senderId ? "black" : "red";
  await endGame(api, game, winner);

  await api.sendMessage(
    {
      msg: `${nameServer}: üè≥Ô∏è ${await getPlayerName(api, senderId)} ƒë√£ ƒë·∫ßu h√†ng!
üéâ ${await getPlayerName(api, game.players[winner])} th·∫Øng!`,
    },
    threadId,
    type
  );
}

async function endGame(api, game, winner) {
  // X·ª≠ l√Ω ti·ªÅn c∆∞·ª£c
  const loser = winner === "red" ? "black" : "red";
  await updatePlayerBalance(game.players[winner], game.betAmount, true);
  await updatePlayerBalance(game.players[loser], game.betAmount.neg(), false);

  // X√≥a game kh·ªèi danh s√°ch active
  activeGames.delete(game.id);
}

async function drawBoard(game) {
  const canvas = createCanvas(800, 900);
  const ctx = canvas.getContext("2d");

  // V·∫Ω background
  ctx.fillStyle = "#f0d9b5";
  ctx.fillRect(0, 0, 800, 900);

  // V·∫Ω l∆∞·ªõi b√†n c·ªù
  ctx.strokeStyle = "#000000";
  ctx.lineWidth = 2;

  // V·∫Ω c√°c ƒë∆∞·ªùng ngang v√† d·ªçc
  for (let i = 0; i < 10; i++) {
    // ƒê∆∞·ªùng ngang
    ctx.beginPath();
    ctx.moveTo(100, 100 + i * 80);
    ctx.lineTo(700, 100 + i * 80);
    ctx.stroke();

    // ƒê∆∞·ªùng d·ªçc
    if (i < 9) {
      ctx.beginPath();
      ctx.moveTo(100 + i * 75, 100);
      ctx.lineTo(100 + i * 75, 820);
      ctx.stroke();
    }
  }

  // V·∫Ω c√°c qu√¢n c·ªù
  for (let row = 0; row < 10; row++) {
    for (let col = 0; col < 9; col++) {
      const piece = game.board[row][col];
      if (piece) {
        const x = 100 + col * 75;
        const y = 100 + row * 80;

        // Load v√† v·∫Ω h√¨nh ·∫£nh qu√¢n c·ªù
        const pieceImage = await loadPieceImage(piece);
        if (pieceImage) {
          ctx.drawImage(pieceImage, x - 25, y - 25, 50, 50);
        }
      }
    }
  }

  // L∆∞u canvas th√†nh file ·∫£nh
  const filePath = path.resolve(`./assets/temp/cotuong_${game.id}_${Date.now()}.png`);
  const out = fs.createWriteStream(filePath);
  const stream = canvas.createPNGStream();
  stream.pipe(out);

  return new Promise((resolve, reject) => {
    out.on("finish", () => resolve(filePath));
    out.on("error", reject);
  });
}

// Th√™m c√°c h√†m ki·ªÉm tra lu·∫≠t ƒëi

function isValidMove(board, from, to, piece) {
  // Kh√¥ng th·ªÉ ƒÉn qu√¢n c√πng m√†u
  const targetPiece = board[to.row][to.col];
  if (targetPiece && targetPiece[0] === piece[0]) {
    return false;
  }

  const pieceType = piece[1];
  switch (pieceType) {
    case 'K': return isValidKingMove(board, from, to, piece[0]);
    case 'A': return isValidAdvisorMove(board, from, to, piece[0]);
    case 'B': return isValidBishopMove(board, from, to, piece[0]);
    case 'N': return isValidKnightMove(board, from, to);
    case 'R': return isValidRookMove(board, from, to);
    case 'C': return isValidCannonMove(board, from, to);
    case 'P': return isValidPawnMove(board, from, to, piece[0]);
    default: return false;
  }
}

// Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa T∆∞·ªõng
function isValidKingMove(board, from, to, color) {
  // T∆∞·ªõng ch·ªâ ƒë∆∞·ª£c ƒëi trong cung
  const isRedKing = color === 'r';
  const palace = isRedKing ? 
    { minRow: 7, maxRow: 9, minCol: 3, maxCol: 5 } :
    { minRow: 0, maxRow: 2, minCol: 3, maxCol: 5 };

  if (to.row < palace.minRow || to.row > palace.maxRow ||
      to.col < palace.minCol || to.col > palace.maxCol) {
    return false;
  }

  // T∆∞·ªõng ch·ªâ ƒë∆∞·ª£c ƒëi 1 b∆∞·ªõc theo chi·ªÅu ngang ho·∫∑c d·ªçc
  const rowDiff = Math.abs(to.row - from.row);
  const colDiff = Math.abs(to.col - from.col);
  return (rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1);
}

// Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Sƒ©
function isValidAdvisorMove(board, from, to, color) {
  // Sƒ© ch·ªâ ƒë∆∞·ª£c ƒëi trong cung
  const isRedAdvisor = color === 'r';
  const palace = isRedAdvisor ? 
    { minRow: 7, maxRow: 9, minCol: 3, maxCol: 5 } :
    { minRow: 0, maxRow: 2, minCol: 3, maxCol: 5 };

  if (to.row < palace.minRow || to.row > palace.maxRow ||
      to.col < palace.minCol || to.col > palace.maxCol) {
    return false;
  }

  // Sƒ© ch·ªâ ƒë∆∞·ª£c ƒëi ch√©o 1 b∆∞·ªõc
  const rowDiff = Math.abs(to.row - from.row);
  const colDiff = Math.abs(to.col - from.col);
  return rowDiff === 1 && colDiff === 1;
}

// Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa T∆∞·ª£ng
function isValidBishopMove(board, from, to, color) {
  // T∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c qua s√¥ng
  const isRedBishop = color === 'r';
  if (isRedBishop && to.row < 5) return false;
  if (!isRedBishop && to.row > 4) return false;

  // T∆∞·ª£ng ƒëi ch√©o 2 b∆∞·ªõc
  const rowDiff = Math.abs(to.row - from.row);
  const colDiff = Math.abs(to.col - from.col);
  if (rowDiff !== 2 || colDiff !== 2) return false;

  // Ki·ªÉm tra c√≥ b·ªã ch·∫∑n ·ªü gi·ªØa kh√¥ng
  const midRow = (from.row + to.row) / 2;
  const midCol = (from.col + to.col) / 2;
  return !board[midRow][midCol]; // Kh√¥ng c√≥ qu√¢n c·∫£n gi·ªØa
}

// Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Ng·ª±a
function isValidKnightMove(board, from, to) {
  const rowDiff = Math.abs(to.row - from.row);
  const colDiff = Math.abs(to.col - from.col);
  
  // Ng·ª±a ƒëi h√¨nh ch·ªØ L (2-1)
  if (!((rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2))) {
    return false;
  }

  // Ki·ªÉm tra ch√¢n ng·ª±a c√≥ b·ªã c·∫£n kh√¥ng
  let midRow = from.row;
  let midCol = from.col;

  if (rowDiff === 2) {
    midRow = from.row + (to.row > from.row ? 1 : -1);
  } else {
    midCol = from.col + (to.col > from.col ? 1 : -1);
  }

  return !board[midRow][midCol]; // Kh√¥ng c√≥ qu√¢n c·∫£n ch√¢n ng·ª±a
}

// Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Xe
function isValidRookMove(board, from, to) {
  const rowDiff = Math.abs(to.row - from.row);
  const colDiff = Math.abs(to.col - from.col);

  // Xe ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng
  if (rowDiff !== 0 && colDiff !== 0) return false;

  // Ki·ªÉm tra c√≥ qu√¢n c·∫£n ƒë∆∞·ªùng kh√¥ng
  const minRow = Math.min(from.row, to.row);
  const maxRow = Math.max(from.row, to.row);
  const minCol = Math.min(from.col, to.col);
  const maxCol = Math.max(from.col, to.col);

  if (rowDiff === 0) {
    // ƒêi ngang
    for (let col = minCol + 1; col < maxCol; col++) {
      if (board[from.row][col]) return false;
    }
  } else {
    // ƒêi d·ªçc
    for (let row = minRow + 1; row < maxRow; row++) {
      if (board[row][from.col]) return false;
    }
  }

  return true;
}

// Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa Ph√°o
function isValidCannonMove(board, from, to) {
  const rowDiff = Math.abs(to.row - from.row);
  const colDiff = Math.abs(to.col - from.col);

  // Ph√°o ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng
  if (rowDiff !== 0 && colDiff !== 0) return false;

  let pieceCount = 0;
  const targetPiece = board[to.row][to.col];

  // ƒê·∫øm s·ªë qu√¢n c·ªù tr√™n ƒë∆∞·ªùng ƒëi
  if (rowDiff === 0) {
    // ƒêi ngang
    const minCol = Math.min(from.col, to.col);
    const maxCol = Math.max(from.col, to.col);
    for (let col = minCol + 1; col < maxCol; col++) {
      if (board[from.row][col]) pieceCount++;
    }
  } else {
    // ƒêi d·ªçc
    const minRow = Math.min(from.row, to.row);
    const maxRow = Math.max(from.row, to.row);
    for (let row = minRow + 1; row < maxRow; row++) {
      if (board[row][from.col]) pieceCount++;
    }
  }

  // Ph√°o c√≥ th·ªÉ ƒëi th·∫≥ng khi kh√¥ng c√≥ qu√¢n c·∫£n
  // ho·∫∑c ƒÉn qu√¢n khi c√≥ ƒë√∫ng 1 qu√¢n l√†m b√†n ƒë·∫°p
  return (pieceCount === 0 && !targetPiece) || 
         (pieceCount === 1 && targetPiece);
}

// Ki·ªÉm tra n∆∞·ªõc ƒëi c·ªßa T·ªët
function isValidPawnMove(board, from, to, color) {
  const isRedPawn = color === 'r';
  const forward = isRedPawn ? -1 : 1;
  const rowDiff = to.row - from.row;
  const colDiff = Math.abs(to.col - from.col);

  // T·ªët ch·ªâ ƒë∆∞·ª£c ƒëi 1 b∆∞·ªõc
  if (Math.abs(rowDiff) > 1 || colDiff > 1) return false;
  if (rowDiff === 0 && colDiff !== 1) return false;

  // Tr∆∞·ªõc khi qua s√¥ng ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng
  const hasCrossedRiver = isRedPawn ? from.row <= 4 : from.row >= 5;
  if (!hasCrossedRiver) {
    return rowDiff === forward && colDiff === 0;
  }

  // Sau khi qua s√¥ng ƒë∆∞·ª£c ƒëi ngang
  return (rowDiff === forward && colDiff === 0) || 
         (rowDiff === 0 && colDiff === 1);
}

// Ki·ªÉm tra t√¨nh tr·∫°ng chi·∫øu t∆∞·ªõng
function checkGameStatus(game) {
  const status = {
    isCheck: false,
    isCheckmate: false
  };

  // T√¨m v·ªã tr√≠ 2 qu√¢n t∆∞·ªõng
  let redKingPos, blackKingPos;
  for (let row = 0; row < 10; row++) {
    for (let col = 0; col < 9; col++) {
      const piece = game.board[row][col];
      if (piece === 'rK') redKingPos = { row, col };
      if (piece === 'bK') blackKingPos = { row, col };
    }
  }

  // Ki·ªÉm tra t∆∞·ªõng ƒë·ªëi m·∫∑t
  if (redKingPos.col === blackKingPos.col) {
    let hasBlockingPiece = false;
    for (let row = redKingPos.row - 1; row > blackKingPos.row; row--) {
      if (game.board[row][redKingPos.col]) {
        hasBlockingPiece = true;
        break;
      }
    }
    if (!hasBlockingPiece) {
      status.isCheck = true;
      status.isCheckmate = true; // T∆∞·ªõng ƒë·ªëi m·∫∑t l√† chi·∫øu b√≠
      return status;
    }
  }

  // Ki·ªÉm tra chi·∫øu t∆∞·ªõng t·ª´ c√°c qu√¢n kh√°c
  const kingPos = game.currentTurn === 'red' ? redKingPos : blackKingPos;
  const opponentColor = game.currentTurn === 'red' ? 'b' : 'r';

  for (let row = 0; row < 10; row++) {
    for (let col = 0; col < 9; col++) {
      const piece = game.board[row][col];
      if (piece && piece[0] === opponentColor) {
        if (isValidMove(game.board, { row, col }, kingPos, piece)) {
          status.isCheck = true;
          break;
        }
      }
    }
  }

  return status;
}
