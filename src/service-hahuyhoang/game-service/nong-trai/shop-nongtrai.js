import { SHOP_ITEMS, CROPS, SOIL_STATUS, PRODUCT_CODES } from "./data-nongtrai.js";
import { getPlayerBalance, updatePlayerBalance } from "../../../database/player.js";
import { checkItemQuantity, setHasChangeState, TIME_TO_LIVE, updatePlayerBagHasSetting } from "./nong-trai.js";
import { formatBigNumber } from "../../../utils/format-util.js";
import Big from "big.js";
import { getGlobalPrefix } from "../../service.js";
import { drawShopCanvas } from "./cv-shop.js";

// Th√™m h√†m t√≠nh gi√° ƒë·∫•t d·ª±a tr√™n s·ªë l∆∞·ª£ng ƒë·∫•t hi·ªán t·∫°i
export function calculateLandPrice(currentPlots) {
  const basePrice = new Big(SHOP_ITEMS.LAND.price);
  if (currentPlots >= 4) {
    // T·ª´ m·∫£nh th·ª© 5 tr·ªü ƒëi, gi√° tƒÉng g·∫•p ƒë√¥i cho m·ªói m·∫£nh
    return basePrice.times(Big(2).pow(currentPlots - 4)).toNumber();
  }
  return basePrice.toNumber();
}

// Hi·ªÉn th·ªã shop
export function formatShopItems(landPrice) {
  let shopMsg = "üè™ N√îNG TR·∫†I SHOP üè™\n\n";
  shopMsg += "üì¶ V·∫¨T PH·∫®M:\n";

  Object.entries(SHOP_ITEMS).forEach(([key, item]) => {
    if (key === "LAND") {
      shopMsg += `${item.icon} [${item.code}] ${item.name}: ${landPrice.toLocaleString("vi-VN")} VNƒê\n`;
      shopMsg += `‚û• ${item.description}\n\n`;
    } else {
      shopMsg += `${item.icon} [${item.code}] ${item.name}: ${item.price.toLocaleString("vi-VN")} VNƒê\n`;
      shopMsg += `‚û• ${item.description}\n\n`;
    }
  });

  shopMsg += "üå± H·∫†T GI·ªêNG:\n";
  Object.entries(CROPS).forEach(([key, crop]) => {
    shopMsg += `${crop.icon} [${crop.code}] ${crop.name}: ${crop.seedPrice.toLocaleString("vi-VN")} VNƒê\n`;
    shopMsg += `‚û• Thu ho·∫°ch sau ${crop.growthTime / 60} ph√∫t\n`;
    shopMsg += `‚û• Thu ho·∫°ch ƒë∆∞·ª£c ${crop.harvestValue.toLocaleString("vi-VN")} VNƒê\n\n`;
  });

  return shopMsg;
}

// Th√™m h√†m m·ªü r·ªông ƒë·∫•t
async function expandFarm(farm) {
  const newPlot = {
    crop: null,
    plantedAt: null,
    waterLevel: 100,
    lastWateredAt: Date.now(),
    status: SOIL_STATUS.GOOD,
    fertilized: null,
  };

  farm.plots.push(newPlot);
  setHasChangeState(true);

  return farm;
}

export async function handleBuyProduct(api, message, farm, buyProductCode, quantity) {
  const threadId = message.threadId;
  const senderId = message.data.uidFrom;

  const product = PRODUCT_CODES[buyProductCode];
  if (!product) {
    await api.sendMessage(
      { msg: "M√£ s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i! S·ª≠ d·ª•ng l·ªánh !nongtrai shop ƒë·ªÉ xem danh s√°ch.", quote: message },
      threadId,
      message.type
    );
    return false;
  }

  if (product.type === "ITEM") {
    if (product.key === "LAND") {
      const buyResult = await buyItem(senderId, product.key, quantity, farm.plots.length);
      if (buyResult.success) {
        await expandFarm(farm);
        await api.sendMessage(
          {
            msg: `${buyResult.message}\nS·ªë √¥ ƒë·∫•t hi·ªán t·∫°i: ${farm.plots.length}`,
            quote: message,
            ttl: TIME_TO_LIVE,
          },
          threadId,
          message.type
        );
      } else {
        await api.sendMessage({ msg: buyResult.message, quote: message, ttl: TIME_TO_LIVE }, threadId, message.type);
      }
      return true;
    } else {
      const buyResult = await buyItem(senderId, product.key, quantity);
      if (buyResult.success) {
        await updatePlayerBagHasSetting(farm, buyProductCode, quantity);
      }
      await api.sendMessage({ msg: buyResult.message, quote: message, ttl: TIME_TO_LIVE }, threadId, message.type);
    }
  } else if (product.type === "CROP") {
    const buyResult = await buySeed(senderId, product.key, quantity);
    if (buyResult.success) {
      await updatePlayerBagHasSetting(farm, buyProductCode, quantity);
    }
    await api.sendMessage({ msg: buyResult.message, quote: message, ttl: TIME_TO_LIVE }, threadId, message.type);
  }
  return true;
}

// S·ª≠a l·∫°i h√†m t√≠nh bonus d·ª±a tr√™n s·ªë √¥ ƒë·∫•t
function calculateBonus(plotCount) {
  // Bonus b·∫Øt ƒë·∫ßu t·ª´ √¥ th·ª© 6 (thay v√¨ √¥ th·ª© 8)
  if (plotCount < 6) return 0;

  // T√≠nh s·ªë m·ªëc ƒë·∫°t ƒë∆∞·ª£c (m·ªói 6 √¥ t√≠nh l√† 1 m·ªëc thay v√¨ 4 √¥)
  // B·∫Øt ƒë·∫ßu t·ª´ m·ªëc 6, sau ƒë√≥ l√† 12, 18, 24, 30...
  let milestone = 0;

  if (plotCount >= 12) {
    // T·ª´ √¥ 12 tr·ªü ƒëi, c·ª© m·ªói 6 √¥ tƒÉng 1 m·ªëc
    milestone = Math.floor((plotCount - 12) / 6) + 2; // +2 cho 2 m·ªëc ƒë·∫ßu (6 v√† 12)
  } else if (plotCount >= 6) {
    // T·ª´ 6-11 √¥ t√≠nh l√† m·ªëc ƒë·∫ßu ti√™n
    milestone = 1;
  }

  // M·ªói m·ªëc tƒÉng 200% gi√° b√°n, t·ªëi ƒëa 3000%
  const bonusPercent = Math.min(milestone * 2.0, 30.0);

  return bonusPercent;
}

// S·ª≠a l·∫°i h√†m sellProduct
async function sellProduct(farm, senderId, productCode, quantity = 1) {
  // Ki·ªÉm tra s·ªë l∆∞·ª£ng trong t√∫i
  const currentQuantity = await checkItemQuantity(farm, productCode);
  if (currentQuantity <= 0) {
    return {
      success: false,
      message: `B·∫°n kh√¥ng c√≥ s·∫£n ph·∫©m n√†y trong t√∫i!`,
    };
  }

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p b√°n h·∫øt
  const sellQuantity = quantity === "all" ? currentQuantity : quantity;

  // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ PRODUCT_CODES
  const productInfo = PRODUCT_CODES[productCode];
  if (!productInfo) {
    return { success: false, message: "M√£ s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!" };
  }

  let sellValue = 0;
  let itemName = "";
  let itemIcon = "";
  let bonusMsg = "";

  // ƒê·ªçc d·ªØ li·ªáu n√¥ng tr·∫°i ƒë·ªÉ l·∫•y s·ªë √¥ ƒë·∫•t
  const plotCount = farm ? farm.plots.length : 4; // M·∫∑c ƒë·ªãnh 4 √¥ n·∫øu ch∆∞a c√≥ farm

  switch (productInfo.type) {
    case "PRODUCT": // Th√†nh ph·∫©m thu ho·∫°ch
      const cropInfo = CROPS[productInfo.key];
      // T√≠nh to√°n bonus d·ª±a tr√™n s √¥ ƒë·∫•t
      const bonus = calculateBonus(plotCount);
      const baseValue = cropInfo.harvestValue * sellQuantity;
      sellValue = Math.floor(baseValue * (1 + bonus));

      if (bonus > 0) {
        bonusMsg = `\n\nüíé Ti·ªÅn b√°n n√¥ng s·∫£n ƒë√£ tƒÉng th√™m ${Math.floor(bonus * 100)}% nh·ªù c√≥ ${plotCount} √¥ ƒë·∫•t!`;
      }

      itemName = cropInfo.name;
      itemIcon = cropInfo.icon;
      break;

    case "CROP": // H·∫°t gi·ªëng
      const seedInfo = CROPS[productInfo.key];
      sellValue = Math.floor(seedInfo.seedPrice * 0.9) * sellQuantity; // Ho√†n l·∫°i 90% gi√° mua
      itemName = `H·∫°t gi·ªëng ${seedInfo.name}`;
      itemIcon = seedInfo.icon;
      break;

    case "ITEM": // V·∫≠t ph·∫©m
      const itemInfo = SHOP_ITEMS[productInfo.key];
      sellValue = Math.floor(itemInfo.price * 0.9) * sellQuantity; // Ho√†n l·∫°i 90% gi√° mua
      itemName = itemInfo.name;
      itemIcon = itemInfo.icon;
      break;

    default:
      return { success: false, message: "Lo·∫°i s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!" };
  }

  // Tr·ª´ s·∫£n ph·∫©m kh·ªèi t√∫i
  await updatePlayerBagHasSetting(farm, productCode, -sellQuantity);

  // C·ªông ti·ªÅn v√†o t√†i kho·∫£n
  await updatePlayerBalance(senderId, sellValue);

  return {
    success: true,
    message: `ƒê√£ b√°n ${sellQuantity} ${itemIcon} ${itemName} v·ªõi gi√° ${sellValue.toLocaleString("vi-VN")} VNƒê!${bonusMsg}`,
  };
}

export async function handleSellProduct(api, message, farm, args) {
  const threadId = message.threadId;
  const senderId = message.data.uidFrom;
  const prefix = getGlobalPrefix();

  if (args.length < 2) {
    await api.sendMessage(
      {
        msg: `Vui l√≤ng nh·∫≠p m√£ s·∫£n ph·∫©m c·∫ßn b√°n. V√≠ d·ª•:\n${prefix}nongtrai sell L1_TP 5\n${prefix}nongtrai sell L1_TP all`,
        quote: message,
      },
      threadId,
      message.type
    );
    return;
  }

  const sellProductCode = args[1].toUpperCase();
  const sellQuantity = args[2] ? (args[2].toLowerCase() === "all" ? "all" : parseInt(args[2])) : 1;

  if (sellQuantity !== "all" && (isNaN(sellQuantity) || sellQuantity <= 0)) {
    await api.sendMessage({ msg: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!", quote: message, ttl: TIME_TO_LIVE }, threadId, message.type);
    return;
  }

  const sellResult = await sellProduct(farm, senderId, sellProductCode, sellQuantity);
  await api.sendMessage({ msg: sellResult.message, quote: message, ttl: TIME_TO_LIVE }, threadId, message.type);
}

export function formatCropsList() {
  let msg = "üå± DANH S√ÅCH H·∫†T GI·ªêNG üå±\n\n";
  Object.entries(CROPS).forEach(([key, crop]) => {
    msg += `${crop.icon} [${crop.code}] ${crop.name} - ${crop.seedPrice.toLocaleString("vi-VN")} VNƒê\n`;
  });
  return msg;
}

export async function buyItem(senderId, itemType, quantity = 1, currentPlots = 4) {
  const item = SHOP_ITEMS[itemType];
  if (!item) {
    return { success: false, message: "V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i!" };
  }

  let totalCost;
  if (itemType === "LAND") {
    if (quantity > 1) {
      return { success: false, message: "Ch·ªâ c√≥ th·ªÉ mua 1 m·∫£nh ƒë·∫•t m·ªói l·∫ßn!" };
    }
    totalCost = new Big(calculateLandPrice(currentPlots));
  } else {
    try {
      totalCost = new Big(item.price).times(quantity);
    } catch (error) {
      return { success: false, message: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n l·ªõn h∆°n 0." };
    }
  }

  const balance = await getPlayerBalance(senderId);
  if (!balance.success || new Big(balance.balance).lt(totalCost)) {
    return {
      success: false,
      message: `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${totalCost.toNumber().toLocaleString("vi-VN")} VNƒê, b·∫°n ch·ªâ c√≥ ${formatBigNumber(
        balance.balance
      )} VNƒê`,
    };
  }

  await updatePlayerBalance(senderId, totalCost.neg().toNumber());
  return {
    success: true,
    message: `ƒê√£ mua th√†nh c√¥ng ${quantity} ${item.name} v·ªõi gi√° ${totalCost.toNumber().toLocaleString("vi-VN")} VNƒê!`,
    item: item,
  };
}

// Mua h·∫°t gi·ªëng
export async function buySeed(senderId, cropType, quantity = 1) {
  const crop = CROPS[cropType];
  if (!crop) {
    return { success: false, message: "Lo·∫°i c√¢y kh√¥ng t·ªìn t·∫°i!" };
  }

  let totalCost;
  try {
    totalCost = new Big(crop.seedPrice).times(quantity);
  } catch (error) {
    return { success: false, message: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë nguy√™n l·ªõn h∆°n 0." };
  }

  const balance = await getPlayerBalance(senderId);
  if (!balance.success || new Big(balance.balance).lt(totalCost)) {
    return {
      success: false,
      message: `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${totalCost.toNumber().toLocaleString("vi-VN")} VNƒê, b·∫°n ch·ªâ c√≥ ${formatBigNumber(
        balance.balance
      )} VNƒê`,
    };
  }

  await updatePlayerBalance(senderId, totalCost.neg().toNumber());
  return {
    success: true,
    message: `ƒê√£ mua th√†nh c√¥ng ${quantity} h·∫°t gi·ªëng ${crop.name} v·ªõi gi√° ${totalCost.toNumber().toLocaleString("vi-VN")} VNƒê!`,
    crop: crop,
  };
}

async function handleShopCommand(api, message, farm, args) {
  const threadId = message.threadId;
  if (args.length >= 2) {
    const buyProductCode = args[1].toUpperCase();
    const quantity = args[2] ? parseInt(args[2]) : 1;
    await handleBuyProduct(api, message, farm, buyProductCode, quantity);
  } else {
    // V·∫Ω shop canvas thay v√¨ g·ª≠i text
    const shopImage = await drawShopCanvas();
    await api.sendMessage(
      {
        msg: "üè™ N√îNG TR·∫†I SHOP üè™\nS·ª≠ d·ª•ng !nongtrai buy [m√£] [s·ªë l∆∞·ª£ng] ƒë·ªÉ mua h√†ng",
        attachments: [shopImage],
        quote: message,
        isUseProphylactic: true,
        ttl: TIME_TO_LIVE,
      },
      threadId,
      message.type
    );
  }
}
