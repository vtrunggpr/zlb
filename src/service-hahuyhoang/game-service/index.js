import { MessageType } from "zlbotdqt";
import Big from "big.js";
import {
  claimDailyReward,
  getTopPlayers,
  getMyCard,
  isHaveLoginAccount,
  banPlayer,
  unbanPlayer,
  isPlayerBanned,
  login,
  registerAccount,
  logout,
  connection,
} from "../../database/index.js";
import { getPlayerBalance, updatePlayerBalance, getPlayerInfo, getAccountVND, updateAccountVND } from "../../database/player.js";
import { sendMessageFromSQL } from "../chat-zalo/chat-style/chat-style.js";
import * as cv from "../../utils/canvas/index.js";
import { isAdmin } from "../../index.js";
import { getGlobalPrefix } from "../service.js";
import { formatBigNumber, formatCurrency, parseGameAmount, removeMention } from "../../utils/format-util.js";
import { sendReactionConfirmReceive } from "../../commands/command.js";

export async function checkBeforeJoinGame(api, message, groupSettings, checkLogin = false) {

  const threadId = message.threadId;
  const senderId = message.data.uidFrom;
  const isAdminBot = isAdmin(senderId, threadId);

  if (!connection) {
    if (isAdminBot) {
      const text =
        "C∆° s·ªü d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông,\n" +
        "vui l√≤ng k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu v√† kh·ªüi ƒë·ªông l·∫°i bot r·ªìi th·ª≠ l·∫°i!";
      const result = {
        success: false,
        message: text,
      };
      await sendMessageFromSQL(api, message, result, true, 30000);
      return false;
    }
  }

  if (groupSettings) {
    const activeGame = groupSettings[threadId].activeGame;
    const isAdminLevelHighest = isAdmin(senderId);
    if (isAdminLevelHighest) return true;
    if (activeGame === false) {
      let text = "";
      if (isAdminBot) {
        text =
          "Tr√≤ ch∆°i hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t trong nh√≥m n√†y.\n\n" +
          "Qu·∫£n tr·ªã vi√™n h√£y d√πng l·ªánh !gameactive ƒë·ªÉ k√≠ch ho·∫°t t∆∞∆°ng t√°c game cho nh√≥m!";
        const result = {
          success: false,
          message: text,
        };
        await sendMessageFromSQL(api, message, result, true, 30000);
      }
      return false;
    }
  }

  if (await checkPlayerBanned(api, message, threadId, senderId)) {
    return false;
  }

  if (checkLogin) {
    if (!(await checkPlayerLogin(api, message, threadId, senderId))) {
      return false;
    }
  }

  await sendReactionConfirmReceive(api, message, 5);
  return true;
}

export async function handleClaimDailyReward(api, message, groupSettings) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings, true))) return;

  const senderId = message.data.uidFrom;
  const result = await claimDailyReward(senderId);
  await sendMessageFromSQL(api, message, result, true, 30000);
}

export async function handleTopPlayers(api, message, groupSettings) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings))) return;

  const threadId = message.threadId;
  const topPlayers = await getTopPlayers();
  let msg = "üèÜ Top 10 ng∆∞·ªùi ch∆°i gi√†u nh·∫•t üèÜ\n\n";

  if (topPlayers.length === 0) {
    msg += "Hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng.";
  } else {
    let idx = 0;
    topPlayers.forEach((player) => {
      if (!isAdmin(player.idUser)) {
        if (idx < 10) {
          msg += `${++idx}. ${player.playerName}: ${formatCurrency(player.balance)} VNƒê\n`;
        }
      }
    });
  }

  await api.sendMessage({ msg: msg, quote: message, ttl: 300000 }, threadId, message.type);
}

export async function handleMyCard(api, message, groupSettings) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings, true))) return;

  const senderId = message.data.uidFrom;
  const threadId = message.threadId;
  const result = await getMyCard(api, senderId);
  if (result.success) {
    const playerInfo = result.data;
    playerInfo.title = "Th√¥ng Tin Ng∆∞·ªùi Ch∆°i";
    let msg = `üé¥ Th√¥ng tin c·ªßa b·∫°n üé¥\n\n`;
    msg += `üë§ T√™n: ${playerInfo.playerName}\n`;
    msg += `üí∞ S·ªë d∆∞: ${formatCurrency(playerInfo.balance)} VNƒê\n`;
    msg += `üèÜ T·ªïng Th·∫Øng: ${formatCurrency(playerInfo.totalWinnings)} VNƒê\n`;
    msg += `üí∏ T·ªïng Thua: ${formatCurrency(playerInfo.totalLosses)} VNƒê\n`;
    msg += `üíπ L·ª£i Nhu·∫≠n R√≤ng: ${formatCurrency(playerInfo.netProfit)} VNƒê\n`;
    msg += `üéÆ T·ªïng S·ªë L∆∞·ª£t Ch∆°i: ${playerInfo.totalGames}\n`;
    msg += `üìä T·ªâ L·ªá Th·∫Øng: ${playerInfo.winRate}%\n`;
    msg += `üìÖ Ng√†y ƒêƒÉng K√Ω: ${playerInfo.registrationTime}\n`;
    msg += `üéÅ Nh·∫≠n Qu√† M·ªói Ng√†y: ${playerInfo.lastDailyReward}`;

    const imagePath = await cv.createUserCardGame(playerInfo);
    await api.sendMessage({ msg: "", attachments: imagePath ? [imagePath] : [] }, threadId, message.type);
    await cv.clearImagePath(imagePath);
  } else {
    await api.sendMessage({ msg: result.message, quote: message }, threadId, message.type);
  }
}

export async function handleBuffCommand(api, message, groupSettings) {
  const senderId = message.data.uidFrom;
  if (!isAdmin(senderId)) {
    return;
  }

  const mentions = message.data.mentions || [];
  let content = removeMention(message);
  const contentParts = content.split(" ");
  let buffAmount;
  try {
    const parsedAmount = parseGameAmount(contentParts[1], Number.MAX_SAFE_INTEGER);
    if (parsedAmount === "allin") {
      const result = {
        success: false,
        message: `Kh√¥ng th·ªÉ s·ª≠ d·ª•ng all/allin cho l·ªánh buff.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }
    buffAmount = new Big(parsedAmount);
  } catch (error) {
    const result = {
      success: false,
      message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.",
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  if (buffAmount.lte(0)) {
    const result = {
      success: false,
      message: `S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  if (!mentions || mentions.length === 0) {
    if (await isHaveLoginAccount(senderId)) {
      // L·∫•y s·ªë d∆∞ hi·ªán t·∫°i
      const currentBalance = await getPlayerBalance(senderId);
      const oldBalance = new Big(currentBalance.balance);

      // Th·ª±c hi·ªán buff
      await updatePlayerBalance(senderId, buffAmount);

      // T√≠nh s·ªë d∆∞ m·ªõi
      const newBalance = oldBalance.plus(buffAmount);

      const result = {
        success: true,
        message:
          `üîÑ Buff ti·ªÅn th√†nh c√¥ng!\n\n` +
          `üí∞ S·ªë ti·ªÅn buff: ${formatBigNumber(buffAmount)} VNƒê\n\n` +
          `üìä Bi·∫øn ƒë·ªông s·ªë d∆∞:\n` +
          `- Tr∆∞·ªõc: ${formatBigNumber(oldBalance)} VNƒê\n` +
          `- Sau: ${formatBigNumber(newBalance)} VNƒê`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
    } else {
      const result = {
        success: false,
        message: `B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p t√†i kho·∫£n ƒë·ªÉ buff cho b·∫£n th√¢n!`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
    }
    return;
  }

  let successMessages = [];
  let failureMessages = [];

  for (const mention of mentions) {
    const targetId = mention.uid;
    const targetName = message.data.content.substring(mention.pos, mention.pos + mention.len).replace("@", "");

    if (await isHaveLoginAccount(targetId)) {
      // L·∫•y s·ªë d∆∞ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c buff
      const currentBalance = await getPlayerBalance(targetId);
      const oldBalance = new Big(currentBalance.balance);

      // Th·ª±c hi·ªán buff
      await updatePlayerBalance(targetId, buffAmount);

      // T√≠nh s·ªë d∆∞ m·ªõi
      const newBalance = oldBalance.plus(buffAmount);

      successMessages.push(
        `‚úÖ ${targetName}:\n` +
        `- Buff: +${formatBigNumber(buffAmount)} VNƒê\n` +
        `- Tr∆∞·ªõc: ${formatBigNumber(oldBalance)} VNƒê\n` +
        `- Sau: ${formatBigNumber(newBalance)} VNƒê`
      );
    } else {
      failureMessages.push(`‚ùå ${targetName}: ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n.`);
    }
  }

  let finalMessage = `üîÑ K·∫øt qu·∫£ buff ti·ªÅn:\n`;
  if (successMessages.length > 0) {
    finalMessage += "\n‚úÖ Th√†nh c√¥ng:\n" + successMessages.join("\n\n") + "\n";
  }
  if (failureMessages.length > 0) {
    finalMessage += "\n‚ùå Th·∫•t b·∫°i:\n" + failureMessages.join("\n");
  }

  const result = {
    success: true,
    message: finalMessage,
  };
  await sendMessageFromSQL(api, message, result, false, 300000);
}

export async function handleBankCommand(api, message, groupSettings) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings, true))) return;

  const senderId = message.data.uidFrom;
  // if (!(await isPlayerActive(senderId))) {
  //   const result = {
  //     success: false,
  //     message: `B·∫°n c·∫ßn m·ªü th√†nh vi√™n ƒë·ªÉ c√≥ th·ªÉ chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c.`,
  //   };
  //   await sendMessageFromSQL(api, message, result);
  //   return;
  // }

  const mentions = message.data.mentions;
  if (!mentions || mentions.length === 0) {
    const result = {
      success: false,
      message: `Vui l√≤ng ƒë·ªÅ c·∫≠p (@mention) ng∆∞·ªùi d√πng c·∫ßn chuy·ªÉn ti·ªÅn!`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  // L·∫•y s·ªë d∆∞ ng∆∞·ªùi g·ª≠i tr∆∞·ªõc
  const requestData = await getPlayerBalance(senderId);
  if (!requestData.success) {
    await sendMessageFromSQL(api, message, requestData, true, 300000);
    return;
  }

  // Sau ƒë√≥ m·ªõi parse s·ªë ti·ªÅn
  let content = removeMention(message);
  const amount = content.split(" ")[1];
  let bankAmount;
  try {
    const parsedAmount = parseGameAmount(amount, requestData.balance);
    if (parsedAmount === "allin") {
      bankAmount = new Big(requestData.balance);
    } else {
      bankAmount = parsedAmount;
    }

    if (bankAmount.lt(1000)) {
      const result = {
        success: false,
        message: `S·ªë ti·ªÅn chuy·ªÉn t·ªëi thi·ªÉu l√† 1,000 VNƒê`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }
  } catch (error) {
    const result = {
      success: false,
      message: error.message,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  // Ki·ªÉm tra s·ªë d∆∞
  if (new Big(requestData.balance).lt(bankAmount)) {
    const result = {
      success: false,
      message: `S·ªë d∆∞ kh√¥ng ƒë·ªß. B·∫°n ch·ªâ c√≥ ${formatBigNumber(new Big(requestData.balance))} VNƒê.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  const targetId = mentions[0].uid;
  const targetName = message.data.content.substring(mentions[0].pos, mentions[0].pos + mentions[0].len).replace("@", "");

  if (await isPlayerBanned(targetId)) {
    const result = {
      success: false,
      message: `${targetName} ƒë√£ b·ªã kh√≥a t√†i kho·∫£n, kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi d√πng n√†y.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  if (await isHaveLoginAccount(targetId)) {
    // L·∫•y s·ªë d∆∞ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
    const senderBalance = new Big(requestData.balance);
    const receiverData = await getPlayerBalance(targetId);
    const receiverBalance = new Big(receiverData.balance);

    // Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
    await updatePlayerBalance(senderId, -bankAmount);
    await updatePlayerBalance(targetId, bankAmount);

    // T√≠nh to√°n s·ªë d∆∞ m·ªõi
    const newSenderBalance = senderBalance.minus(bankAmount);
    const newReceiverBalance = receiverBalance.plus(bankAmount);

    const result = {
      success: true,
      message:
        `üîÑ Giao d·ªãch chuy·ªÉn ti·ªÅn th√†nh c√¥ng!\n\n` +
        `üí∞ S·ªë ti·ªÅn chuy·ªÉn: ${formatBigNumber(new Big(bankAmount))} VNƒê\n\n` +
        `üìä Bi·∫øn ƒë·ªông s·ªë d∆∞:\n` +
        `üë§ Ng∆∞·ªùi g·ª≠i:\n` +
        `- Tr∆∞·ªõc: ${formatBigNumber(senderBalance)} VNƒê\n` +
        `- Sau: ${formatBigNumber(newSenderBalance)} VNƒê\n\n` +
        `üë• Ng∆∞·ªùi nh·∫≠n (${targetName}):\n` +
        `- Tr∆∞·ªõc: ${formatBigNumber(receiverBalance)} VNƒê\n` +
        `- Sau: ${formatBigNumber(newReceiverBalance)} VNƒê`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
  } else {
    const result = {
      success: false,
      message: `${targetName} ch∆∞a ƒëƒÉng nh·∫≠p b·∫•t k·ª≥ t√†i kho·∫£n n√†o.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
  }
}

export async function handleBanCommand(api, message, groupSettings) {
  const senderId = message.data.uidFrom;
  const threadId = message.threadId;

  if (!isAdmin(senderId, threadId)) {
    const result = {
      success: false,
      message: `B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  const mentions = message.data.mentions;
  if (!mentions || mentions.length === 0) {
    const result = {
      success: false,
      message: `Vui l√≤ng ƒë·ªÅ c·∫≠p (@mention) ng∆∞·ªùi d√πng c·∫ßn ban.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  for (const mention of mentions) {
    const targetId = mention.uid;
    const targetName = message.data.content.substring(mention.pos, mention.pos + mention.len).replace("@", "");

    if (isAdmin(targetId, threadId)) {
      const result = {
        success: false,
        message: `${targetName} l√† qu·∫£n tr·ªã vi√™n, kh√¥ng th·ªÉ kh√≥a t√†i kho·∫£n ƒë∆∞·ª£c.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    if (await isHaveLoginAccount(targetId)) {
      if (await isPlayerBanned(targetId)) {
        const result = {
          success: false,
          message: `${targetName} ƒë√£ b·ªã kh√≥a t√†i kho·∫£n.`,
        };
        await sendMessageFromSQL(api, message, result, true, 300000);
        return;
      } else {
        await banPlayer(targetId);
        const result = {
          success: true,
          message: `ƒê√£ kh√≥a t√†i kho·∫£n c·ªßa ${targetName} kh·ªèi h·ªá th·ªëng game.`,
        };
        await sendMessageFromSQL(api, message, result, true, 300000);
      }
    } else {
      const result = {
        success: false,
        message: `${targetName} ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }
  }
}

export async function handleUnbanCommand(api, message, groupSettings) {
  const senderId = message.data.uidFrom;
  const threadId = message.threadId;

  if (!isAdmin(senderId, threadId)) {
    const result = {
      success: false,
      message: `B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.`,
    };
    await sendMessageFromSQL(api, message, result);
    return;
  }

  const mentions = message.data.mentions;
  if (!mentions || mentions.length === 0) {
    const result = {
      success: false,
      message: `Vui l√≤ng ƒë·ªÅ c·∫≠p (@mention) ng∆∞·ªùi d√πng c·∫ßn m·ªü kh√≥a t√†i kho·∫£n.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  for (const mention of mentions) {
    const targetId = mention.uid;
    const targetName = message.data.content.substring(mention.pos, mention.pos + mention.len).replace("@", "");

    if (await isHaveLoginAccount(targetId)) {
      if (await isPlayerBanned(targetId)) {
        await unbanPlayer(targetId);
        const result = {
          success: true,
          message: `ƒê√£ unban ${targetName}, ng∆∞·ªùi ch∆°i c√≥ th·ªÉ tham gia l·∫°i c√°c tr√≤ ch∆°i.`,
        };
        await sendMessageFromSQL(api, message, result, true, 300000);
      } else {
        const result = {
          success: false,
          message: `${targetName} kh√¥ng b·ªã kh√≥a t√†i kho·∫£n.`,
        };
        await sendMessageFromSQL(api, message, result, true, 300000);
      }
    } else {
      const result = {
        success: false,
        message: `${targetName} ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
    }
  }
}

export async function checkPlayerBanned(api, message, threadId, senderId) {
  if (await isPlayerBanned(senderId)) {
    const result = {
      success: false,
      message: `T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a, kh√¥ng th·ªÉ th·ª±c hi·ªán b·∫•t k·ª≥ l·ªánh game n√†o n·ªØa!`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return true;
  }
  return false;
}

export async function checkPlayerLogin(api, message, threadId, senderId) {
  if (!(await isHaveLoginAccount(senderId))) {
    const prefix = getGlobalPrefix(threadId);
    const result = {
      success: false,
      message: `B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p t√†i kho·∫£n game tr√™n zalo n√†y, vui l√≤ng s·ª≠ d·ª•ng l·ªánh ${prefix}game ƒë·ªÉ xem h∆∞·ªõng d·∫´n.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return false;
  }
  return true;
}

export async function handleLoginPlayer(api, message, groupSettings) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings))) return;

  if (message.type === MessageType.GroupMessage) {
    await api.deleteMessage(message, false).catch(console.error);
    const result = {
      success: false,
      message: `V√¨ l√Ω do b·∫£o m·∫≠t, b·∫°n kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p t√†i kho·∫£n trong nh√≥m!\nVui l√≤ng nh·∫Øn ri√™ng cho t√¥i ƒë·ªÉ ƒëƒÉng nh·∫≠p t√†i kho·∫£n.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  const senderName = message.data.dName;
  const senderId = message.data.uidFrom;

  if (await isHaveLoginAccount(senderId)) {
    const result = {
      success: false,
      message: `B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p t√†i kho·∫£n game tr√™n zalo n√†y!.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  const content = removeMention(message);
  const parts = content.split(" ");

  if (parts.length !== 3) {
    const result = {
      success: false,
      message: `Vui l√≤ng s·ª≠ d·ª•ng l·ªánh ƒë√∫ng c√∫ ph√°p:\n!login [t√™n ƒëƒÉng nh·∫≠p] [m·∫≠t kh·∫©u].`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  const username = parts[1];
  const password = parts[2];
  const result = await login(username, password, senderId, senderName, api);

  await sendMessageFromSQL(api, message, result, true, 300000);
}

export async function handleRegisterPlayer(api, message, groupSettings) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings))) return;
  const senderId = message.data.uidFrom;

  const content = removeMention(message);
  const parts = content.split(" ");
  const senderName = message.data.dName;

  if (await isHaveLoginAccount(senderId)) {
    const result = {
      success: false,
      message: `B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p t√†i kho·∫£n game tr√™n zalo n√†y, kh√¥ng th·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  if (message.type === MessageType.GroupMessage) {
    await api.deleteMessage(message, false).catch(console.error);
    const result = {
      success: false,
      message: `V√¨ l√Ω do b·∫£o m·∫≠t, b·∫°n kh√¥ng th·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n trong nh√≥m!\nVui l√≤ng nh·∫Øn ri√™ng cho t√¥i ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n.`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  if (parts.length !== 3) {
    const result = {
      success: false,
      message: `Vui l√≤ng s·ª≠ d·ª•ng l·ªánh ƒë√∫ng c√∫ ph√°p:\n!dangky [t√™n ƒëƒÉng k√Ω] [m·∫≠t kh·∫©u].`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
    return;
  }

  const username = parts[1];
  const password = parts[2];

  let result = await registerAccount(username, password);

  await sendMessageFromSQL(api, message, result, true, 300000);

  if (result.success) {
    result = await login(username, password, senderId, senderName, api);
    await sendMessageFromSQL(api, message, result, true, 300000);
  }
}

export async function handleLogoutPlayer(api, message, groupSettings) {
  if (!(await checkBeforeJoinGame(api, message, groupSettings, true))) return;
  const senderId = message.data.uidFrom;
  const result = await logout(senderId);
  await sendMessageFromSQL(api, message, result, true, 300000);
}

// H√†m x·ª≠ l√Ω l·ªánh n·∫°p ti·ªÅn
export async function handleNapCommand(api, message, groupSettings) {
  try {
    if (!(await checkBeforeJoinGame(api, message, groupSettings, true))) return;

    const senderId = message.data.uidFrom;
    const content = removeMention(message);
    const parts = content.split(" ");

    if (parts.length !== 2) {
      const result = {
        success: false,
        message: `Vui l√≤ng s·ª≠ d·ª•ng l·ªánh ƒë√∫ng c√∫ ph√°p:\n!nap [S·ªë Ti·ªÅn/10%/100k/1m/1b]`,
      };
      await sendMessageFromSQL(api, message, result, true, 30000);
      return;
    }

    // L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i t·ª´ b·∫£ng player_zalo
    const playerInfo = await getPlayerInfo(senderId);
    if (!playerInfo) {
      const result = {
        success: false,
        message: `Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    // L·∫•y s·ªë d∆∞ VND t·ª´ b·∫£ng account
    const accountVND = await getAccountVND(playerInfo.username);
    if (accountVND === null) {
      const result = {
        success: false,
        message: `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·ªë d∆∞ VND t·ª´ t√†i kho·∫£n game ${playerInfo.username}.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    const accountBalance = new Big(accountVND);

    // Parse s·ªë ti·ªÅn sau khi ƒë√£ c√≥ accountBalance
    let napAmount;
    try {
      const parsedAmount = parseGameAmount(parts[1], accountBalance);
      if (parsedAmount === "allin") {
        napAmount = accountBalance;
      } else {
        napAmount = parsedAmount;
      }

      if (napAmount.lt(20000)) {
        const result = {
          success: false,
          message: `S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 20,000 VNƒê.`,
        };
        await sendMessageFromSQL(api, message, result, true, 300000);
        return;
      }
    } catch (error) {
      const result = {
        success: false,
        message: error.message,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    if (accountBalance.lt(napAmount)) {
      const result = {
        success: false,
        message: `S·ªë d∆∞ VND trong t√†i kho·∫£n ${playerInfo.username} ch·ªâ c√≥ ${formatBigNumber(accountBalance)} VNƒê.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    const oldAccountBalance = accountBalance;
    const oldBotBalance = new Big(playerInfo.balance);

    // C·∫≠p nh·∫≠t s·ªë d∆∞ trong game
    const gameAmount = napAmount;
    await updatePlayerBalance(senderId, gameAmount.toNumber());
    // C·∫≠p nh·∫≠t s·ªë d∆∞ VND trong account
    await updateAccountVND(playerInfo.username, napAmount.neg().toNumber());

    const newAccountBalance = oldAccountBalance.minus(napAmount);
    const newBotBalance = oldBotBalance.plus(gameAmount);

    const result = {
      success: true,
      message:
        `üîÑ Giao d·ªãch n·∫°p ti·ªÅn th√†nh c√¥ng!\n\n` +
        `üí∞ S·ªë ti·ªÅn n·∫°p: ${formatBigNumber(napAmount)} VNƒê\n\n` +
        `üìä Bi·∫øn ƒë·ªông s·ªë d∆∞:\n` +
        `üéÆ T√†i kho·∫£n ${playerInfo.username}:\n` +
        `- Tr∆∞·ªõc: ${formatBigNumber(oldAccountBalance)} VNƒê\n` +
        `- Sau: ${formatBigNumber(newAccountBalance)} VNƒê\n\n` +
        `ü§ñ T√†i kho·∫£n Bot Zalo:\n` +
        `- Tr∆∞·ªõc: ${formatBigNumber(oldBotBalance)} VNƒê\n` +
        `- Sau: ${formatBigNumber(newBotBalance)} VNƒê`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω l·ªánh n·∫°p:", error);
    const result = {
      success: false,
      message: `ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh n·∫°p!`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
  }
}

// H√†m x·ª≠ l√Ω l·ªánh r√∫t ti·ªÅn
export async function handleRutCommand(api, message, groupSettings) {
  try {
    if (!(await checkBeforeJoinGame(api, message, groupSettings, true))) return;

    const senderId = message.data.uidFrom;
    const content = removeMention(message);
    const parts = content.split(" ");

    if (parts.length !== 2) {
      const result = {
        success: false,
        message: `Vui l√≤ng s·ª≠ d·ª•ng l·ªánh ƒë√∫ng c√∫ ph√°p:\n!rut [S·ªë Ti·ªÅn/10%/100k/1m/1b]`,
      };
      await sendMessageFromSQL(api, message, result, true, 30000);
      return;
    }

    // L·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i t·ª´ b·∫£ng player_zalo tr∆∞·ªõc
    const playerInfo = await getPlayerInfo(senderId);
    if (!playerInfo) {
      const result = {
        success: false,
        message: `Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n.`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    // L·∫•y s·ªë d∆∞ hi·ªán t·∫°i
    const currentBotBalance = new Big(playerInfo.balance);
    const accountVND = await getAccountVND(playerInfo.username);
    const currentAccountBalance = new Big(accountVND);

    // Parse s·ªë ti·ªÅn sau khi ƒë√£ c√≥ currentBotBalance
    let rutAmount;
    try {
      const parsedAmount = parseGameAmount(parts[1], currentBotBalance);
      if (parsedAmount === "allin") {
        rutAmount = currentBotBalance;
      } else {
        rutAmount = parsedAmount;
      }

      if (rutAmount.lt(20000)) {
        const result = {
          success: false,
          message: `S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu l√† 20,000 VNƒê.`,
        };
        await sendMessageFromSQL(api, message, result, true, 300000);
        return;
      }
    } catch (error) {
      const result = {
        success: false,
        message: error.message,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    // Ki·ªÉm tra s·ªë d∆∞
    if (currentBotBalance.lt(rutAmount)) {
      const result = {
        success: false,
        message: `S·ªë d∆∞ trong t√†i kho·∫£n bot kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t ${formatBigNumber(rutAmount)} VNƒê v·ªÅ t√†i kho·∫£n ${playerInfo.username}!`,
      };
      await sendMessageFromSQL(api, message, result, true, 300000);
      return;
    }

    // C·∫≠p nh·∫≠t s·ªë d∆∞ trong game
    await updatePlayerBalance(senderId, rutAmount.neg().toNumber());
    // C·∫≠p nh·∫≠t s·ªë d∆∞ VND trong account
    await updateAccountVND(playerInfo.username, rutAmount.toNumber());

    const newBotBalance = currentBotBalance.minus(rutAmount);
    const newAccountBalance = currentAccountBalance.plus(rutAmount);

    const result = {
      success: true,
      message:
        `üîÑ Giao d·ªãch r√∫t ti·ªÅn th√†nh c√¥ng!\n\n` +
        `üí∞ S·ªë ti·ªÅn r√∫t: ${formatBigNumber(rutAmount)} VNƒê\n\n` +
        `üìä Bi·∫øn ƒë·ªông s·ªë d∆∞:\n` +
        `ü§ñ T√†i kho·∫£n Bot Zalo:\n` +
        `- Tr∆∞·ªõc: ${formatBigNumber(currentBotBalance)} VNƒê\n` +
        `- Sau: ${formatBigNumber(newBotBalance)} VNƒê\n\n` +
        `üéÆ T√†i kho·∫£n ${playerInfo.username}:\n` +
        `- Tr∆∞·ªõc: ${formatBigNumber(currentAccountBalance)} VNƒê\n` +
        `- Sau: ${formatBigNumber(newAccountBalance)} VNƒê`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω l·ªánh r√∫t:", error);
    const result = {
      success: false,
      message: `ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh r√∫t!`,
    };
    await sendMessageFromSQL(api, message, result, true, 300000);
  }
}
