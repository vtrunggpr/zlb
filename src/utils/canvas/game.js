import fs from "fs/promises";
import path from "path";
import { createCanvas, loadImage } from "canvas";
import { formatCurrency } from "../format-util.js";
import { nameServer } from "../../database/index.js";

export async function createTaiXiuResultImage(result, taiTotal, xiuTotal, jackpotInfo) {
  const width = 800;
  let height = 300;
  if (jackpotInfo?.isJackpot) {
    height = 360;
  }
  const widthCenter = width / 2;
  const heightCenter = height / 2;
  const leftCenter = width * 0.25;
  const rightCenter = width * 0.75;

  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  const gradient = ctx.createRadialGradient(widthCenter, heightCenter, 0, widthCenter, heightCenter, width / 2);
  if (jackpotInfo?.isJackpot) {
    // Gradient v√†ng t·ªëi h∆°n v√† sang tr·ªçng h∆°n
    gradient.addColorStop(0, "#B8860B"); // V√†ng ƒë·∫≠m ·ªü t√¢m
    gradient.addColorStop(0.7, "#8B6914"); // V√†ng n√¢u ·ªü gi·ªØa
    gradient.addColorStop(1, "#654321"); // N√¢u ƒë·∫≠m ·ªü ngo√†i
  } else {
    gradient.addColorStop(0, "#4c0000"); // ƒê·ªè x·∫≠m ·ªü t√¢m
    gradient.addColorStop(0.7, "#2a0000"); // ƒê·ªè x·∫≠m ƒëen ·ªü gi·ªØa
    gradient.addColorStop(1, "#320202"); // G·∫ßn nh∆∞ ƒëen ·ªü ngo√†i
  }
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);

  // ƒêi·ªÅu ch·ªânh hi·ªáu ·ª©ng √°nh s√°ng cho jackpot
  const lightGradient = ctx.createRadialGradient(widthCenter, heightCenter, 0, widthCenter, heightCenter, width / 2);
  if (jackpotInfo?.isJackpot) {
    lightGradient.addColorStop(0, "rgba(255, 215, 0, 0.3)"); // √Ånh s√°ng v√†ng
    lightGradient.addColorStop(0.5, "rgba(255, 215, 0, 0.1)");
    lightGradient.addColorStop(1, "rgba(255, 215, 0, 0.05)");
  } else {
    lightGradient.addColorStop(0, "rgba(255, 255, 255, 0.15)");
    lightGradient.addColorStop(0.5, "rgba(255, 255, 255, 0.05)");
    lightGradient.addColorStop(1, "rgba(255, 255, 255, 0)");
  }
  ctx.fillStyle = lightGradient;
  ctx.fillRect(0, 0, width, height);

  // Th√™m hi·ªáu ·ª©ng l·∫•p l√°nh
  for (let i = 0; i < 70; i++) {
    const x = Math.random() * width;
    const y = Math.random() * height;
    const radius = Math.random() * 1.5;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.7})`;
    ctx.fill();
  }

  // V·∫Ω dƒ©a tr√≤n ·ªü gi·ªØa
  const centerX = widthCenter;
  const centerY = heightCenter;
  const radius = 100;
  ctx.beginPath();
  ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
  ctx.fillStyle = "rgba(255, 255, 255, 0.2)";
  ctx.fill();
  ctx.strokeStyle = "rgba(255, 255, 255, 0.5)";
  ctx.lineWidth = 3;
  ctx.stroke();

  // K√≠ch th∆∞·ªõc x√∫c x·∫Øc
  const diceSize = 40;
  const minDistance = diceSize * 1.5;

  // M·∫£ng l∆∞u v·ªã tr√≠ c√°c x√∫c x·∫Øc
  const dicePositions = [];

  // H√†m ki·ªÉm tra x√∫c s·∫Øc m·ªõi c√≥ ƒë√® l√™n x√∫c s·∫Øc c≈© kh√¥ng
  const isOverlapping = (x, y, positions) => {
    const minDistance = diceSize * 1.2; // Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c x√∫c s·∫Øc
    return positions.some((pos) => {
      const distance = Math.sqrt(Math.pow(pos.x - x, 2) + Math.pow(pos.y - y, 2));
      return distance < minDistance;
    });
  };

  // V·∫Ω 3 x√∫c x·∫Øc 3D v·ªõi v·ªã tr√≠ ng·∫´u nhi√™n kh√¥ng ch·ªìng l√™n nhau
  for (let i = 0; i < result.dice.length; i++) {
    const diceValue = result.dice[i];
    let x, y;
    let attempts = 0;
    const maxAttempts = 1000;

    do {
      const angle = Math.random() * 2 * Math.PI;
      const distance = Math.random() * (radius - diceSize);
      x = centerX + distance * Math.cos(angle);
      y = centerY + distance * Math.sin(angle);
      attempts++;
    } while (isOverlapping(x, y, dicePositions) && attempts < maxAttempts);

    dicePositions.push({ x, y });

    const imagePath = path.join(process.cwd(), "assets", "resources", "game", "taixiu", `dice_${diceValue}.png`);

    try {
      const img = await loadImage(imagePath);
      ctx.save();

      // Di chuy·ªÉn g·ªëc t·ªça ƒë·ªô ƒë·∫øn t√¢m c·ªßa x√∫c x·∫Øc
      ctx.translate(x, y);

      // Xoay ng·∫´u nhi√™n
      const rotation = Math.random() * 2 * Math.PI;
      ctx.rotate(rotation);

      // V·∫Ω x√∫c x·∫Øc
      ctx.drawImage(img, -diceSize / 2, -diceSize / 2, diceSize, diceSize);

      // Kh√¥i ph·ª•c tr·∫°ng th√°i canvas
      ctx.restore();
    } catch (error) {
      console.error(`Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh cho x√∫c x·∫Øc ${diceValue}`);
    }
  }

  const gradientWin = ["#FFFF00", "#FFD700", "#FFA500"];
  const gradientLose = ["#A9A9A9", "#808080", "#696969"];

  // V·∫Ω k·∫øt qu·∫£ (T√†i ho·∫∑c X·ªâu)
  const resultText = result.result === "tai" ? "T√ÄI" : "X·ªàU";
  const resultGradient = result.result === "tai" ? ["#FF0000", "#EB1542", "#FF0000"] : ["#00FFFF", "#00CED1", "#00FFFF"];
  drawTextWithEffects(ctx, resultText, width / 2, centerY - radius, 35, "bold", resultGradient, "#000000", 4, "rgba(0,0,0,0.5)", 10);

  let taiTotalText = formatCurrency(taiTotal, 1000000000000);
  let xiuTotalText = formatCurrency(xiuTotal, 1000000000000);

  // V·∫Ω ch·ªØ "T√†i" v√† s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c
  drawTextWithEffects(
    ctx,
    "T√†i",
    leftCenter - radius / 2,
    centerY - 20,
    30,
    "bold",
    resultText === "T√ÄI" ? gradientWin : gradientLose,
    "#000000",
    3,
    "rgba(0,0,0,0.3)",
    5
  );
  drawTextWithEffects(
    ctx,
    taiTotalText,
    leftCenter - radius / 2,
    centerY + 20,
    28,
    "normal",
    resultText === "T√ÄI" ? gradientWin : gradientLose,
    "#000000",
    2,
    "rgba(0,0,0,0.3)",
    3
  );

  // V·∫Ω ch·ªØ "X·ªâu" v√† s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c
  drawTextWithEffects(
    ctx,
    "X·ªâu",
    rightCenter + radius / 2,
    centerY - 20,
    30,
    "bold",
    resultText === "X·ªàU" ? gradientWin : gradientLose,
    "#000000",
    3,
    "rgba(0,0,0,0.3)",
    5
  );
  drawTextWithEffects(
    ctx,
    xiuTotalText,
    rightCenter + radius / 2,
    centerY + 20,
    28,
    "normal",
    resultText === "X·ªàU" ? gradientWin : gradientLose,
    "#000000",
    2,
    "rgba(0,0,0,0.3)",
    3
  );

  const gradientPink = ["#FF69B4", "#FF1493", "#C71585"];
  // V·∫Ω t·ªïng ƒëi·ªÉm
  drawTextWithEffects(
    ctx,
    result.total.toString(),
    centerX,
    centerY + radius / 2 + 45,
    30,
    "bold",
    resultGradient,
    "#000000",
    4,
    "rgba(0,0,0,0.5)",
    10
  );

  // N·∫øu c√≥ jackpot, v·∫Ω th√™m th√¥ng tin s·ªë ti·ªÅn tr√∫ng
  if (jackpotInfo?.isJackpot) {
    // T·∫°o gradient cho text ti·ªÅn h≈©
    const textGradient = ctx.createLinearGradient(0, height - 40, 0, height);
    textGradient.addColorStop(0, "#FFD700"); // V√†ng s√°ng
    textGradient.addColorStop(0.5, "#FFF8DC"); // V√†ng nh·∫°t
    textGradient.addColorStop(1, "#FFD700"); // V√†ng s√°ng

    ctx.font = "bold 28px Arial";
    ctx.textAlign = "center";
    ctx.strokeStyle = "#000000";
    ctx.lineWidth = 3;
    const jackpotText = `N·ªî H≈®: ${formatCurrency(jackpotInfo.jackpotAmount)} VNƒê üí∞`;

    // V·∫Ω vi·ªÅn ƒëen
    ctx.strokeText(jackpotText, width / 2, height - 20);

    // V·∫Ω text v·ªõi gradient
    ctx.fillStyle = textGradient;
    ctx.fillText(jackpotText, width / 2, height - 20);
  }

  // L∆∞u canvas th√†nh file ·∫£nh
  const filePath = path.resolve(`./assets/temp/taixiu_result_${Date.now()}.png`);
  await fs.writeFile(filePath, canvas.toBuffer());

  return filePath;
}

export async function createWaitingImage(remainingSeconds, taiTotal, xiuTotal) {
  const width = 800;
  const height = 300;
  const widthCenter = width / 2;
  const heightCenter = height / 2;
  const leftCenter = width * 0.25;
  const rightCenter = width * 0.75;

  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  // V·∫Ω background gradient t·ª´ t√¢m ra ngo√†i
  const gradient = ctx.createRadialGradient(widthCenter, heightCenter, 0, widthCenter, heightCenter, width / 2);
  gradient.addColorStop(0, "#4c0000");
  gradient.addColorStop(0.7, "#2a0000");
  gradient.addColorStop(1, "#320202");
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);

  // Th√™m hi·ªáu ·ª©ng √°nh s√°ng nh·∫π
  const lightGradient = ctx.createRadialGradient(widthCenter, heightCenter, 0, widthCenter, heightCenter, width / 2);
  lightGradient.addColorStop(0, "rgba(255, 255, 255, 0.15)");
  lightGradient.addColorStop(0.5, "rgba(255, 255, 255, 0.05)");
  lightGradient.addColorStop(1, "rgba(255, 255, 255, 0)");
  ctx.fillStyle = lightGradient;
  ctx.fillRect(0, 0, width, height);

  // Th√™m hi·ªáu ·ª©ng l·∫•p l√°nh
  for (let i = 0; i < 70; i++) {
    const x = Math.random() * width;
    const y = Math.random() * height;
    const radius = Math.random() * 1.5;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.7})`;
    ctx.fill();
  }

  // V·∫Ω dƒ©a tr√≤n √∫p ·ªü gi·ªØa
  const centerX = widthCenter;
  const centerY = heightCenter;
  const radius = 100;
  ctx.beginPath();
  ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
  ctx.fillStyle = "rgba(100, 100, 100, 0.7)";
  ctx.fill();
  ctx.strokeStyle = "rgba(255, 255, 255, 0.5)";
  ctx.lineWidth = 3;
  ctx.stroke();

  // V·∫Ω s·ªë gi√¢y c√≤n l·∫°i
  drawTextWithEffects(
    ctx,
    remainingSeconds.toString(),
    centerX,
    centerY,
    60,
    "bold",
    ["#FFFFFF", "#DDDDDD", "#FFFFFF"],
    "#000000",
    4,
    "rgba(0,0,0,0.5)",
    10
  );

  // const gradiantTai = ["#FF1493", "#FF0000", "#8B0000"];
  const gradiantTai = ["#FF9999", "#FF6666", "#FF3333"];
  const gradiantXiu = ["#E0FFFF", "#AFEEEE", "#87CEEB"];
  const fontSize1 = 38;
  const fontSize2 = 32;

  // V·∫Ω ch·ªØ "T√†i" v√† s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c
  let taiTotalText = formatCurrency(taiTotal, 1000000000000);
  drawTextWithEffects(
    ctx,
    "T√†i",
    leftCenter - radius / 2,
    centerY - 28,
    fontSize1,
    "bold",
    gradiantTai,
    "#000000",
    3,
    "rgba(0,0,0,0.3)",
    5
  );
  drawTextWithEffects(
    ctx,
    taiTotalText,
    leftCenter - radius / 2,
    centerY + 28,
    fontSize2,
    "normal",
    gradiantTai,
    "#000000",
    2,
    "rgba(0,0,0,0.3)",
    3
  );

  // V·∫Ω ch·ªØ "X·ªâu" v√† s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c
  let xiuTotalText = formatCurrency(xiuTotal, 1000000000000);
  drawTextWithEffects(
    ctx,
    "X·ªâu",
    rightCenter + radius / 2,
    centerY - 28,
    fontSize1,
    "bold",
    gradiantXiu,
    "#000000",
    3,
    "rgba(0,0,0,0.3)",
    5
  );
  drawTextWithEffects(
    ctx,
    xiuTotalText,
    rightCenter + radius / 2,
    centerY + 28,
    fontSize2,
    "normal",
    gradiantXiu,
    "#000000",
    2,
    "rgba(0,0,0,0.3)",
    3
  );

  // L∆∞u canvas th√†nh file ·∫£nh
  const filePath = path.resolve(`./assets/temp/taixiu_waiting_${Date.now()}.png`);
  await fs.writeFile(filePath, canvas.toBuffer());

  return filePath;
}

// H√†m t·∫°o hi·ªáu ·ª©ng ch·ªØ n·ªïi v·ªõi vi·ªÅn, b√≥ng ƒë·ªï v√† gradient t·ª´ t√¢m
function drawTextWithEffects(ctx, text, x, y, fontSize, fontWeight, gradientColors, outlineColor, outlineWidth, shadowColor, shadowBlur) {
  ctx.save();
  ctx.font = `${fontWeight} ${fontSize}px 'Bebas Neue', 'Oswald', sans-serif`;
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";

  // Th√™m b√≥ng ƒë·ªï
  ctx.shadowColor = shadowColor;
  ctx.shadowBlur = shadowBlur;
  ctx.shadowOffsetX = 2;
  ctx.shadowOffsetY = 2;

  // T·∫°o gradient cho ch·ªØ t·ª´ t√¢m ra hai ph√≠a
  const textWidth = ctx.measureText(text).width;
  const gradient = ctx.createLinearGradient(x - textWidth / 2, y, x + textWidth / 2, y);
  gradientColors.forEach((color, index) => {
    const stop = index / (gradientColors.length - 1);
    gradient.addColorStop(stop, color);
  });

  // V·∫Ω vi·ªÅn
  ctx.strokeStyle = outlineColor;
  ctx.lineWidth = outlineWidth;
  ctx.strokeText(text, x, y);

  // V·∫Ω ch·ªØ v·ªõi gradient
  ctx.fillStyle = gradient;
  ctx.fillText(text, x, y);

  ctx.restore();
}

export async function createSoiCauImage(history, maxHistory = 20) {
  const width = 800;
  const height = 600;
  const padding = 40;
  const graphHeight = (height - padding * 3) / 2;

  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  // V·∫Ω background
  const gradient = ctx.createLinearGradient(0, 0, 0, height);
  gradient.addColorStop(0, "#1a1a1a");
  gradient.addColorStop(1, "#000000");
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);

  // Th√™m hi·ªáu ·ª©ng l·∫•p l√°nh
  for (let i = 0; i < 100; i++) {
    const x = Math.random() * width;
    const y = Math.random() * height;
    const radius = Math.random() * 1.5;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.3})`;
    ctx.fill();
  }

  // V·∫Ω ƒë·ªì th·ªã ch·∫µn l·∫ª
  ctx.save();
  ctx.translate(padding, padding);
  drawEvenOddGraph(ctx, history, width - padding * 2, graphHeight, maxHistory);
  ctx.restore();

  // V·∫Ω ƒë·ªì th·ªã ƒë∆∞·ªùng ƒëi x√∫c s·∫Øc
  ctx.save();
  ctx.translate(padding, padding * 2 + graphHeight);
  drawDicePathGraph(ctx, history, width - padding * 2, graphHeight, maxHistory);
  ctx.restore();

  // L∆∞u canvas th√†nh file ·∫£nh
  const filePath = path.resolve(`./assets/temp/taixiu_soicau_${Date.now()}.png`);
  await fs.writeFile(filePath, canvas.toBuffer());

  return filePath;
}

function drawEvenOddGraph(ctx, history, width, height, maxHistory = 20) {
  const step = width / (maxHistory - 1);
  const totalPoints = 15; // Gi·∫£m xu·ªëng 15 ƒë·ªÉ c√≥ 16 h√†ng (0-15)
  const gridSize = height / totalPoints;

  // V·∫Ω khung ƒë·ªì th·ªã
  ctx.strokeStyle = "#333333";
  ctx.lineWidth = 1;
  ctx.strokeRect(0, 0, width, height);

  // V·∫Ω l∆∞·ªõi √¥ vu√¥ng v·ªõi m√†u s√°ng h∆°n
  ctx.strokeStyle = "rgba(255, 255, 255, 0.2)";
  ctx.lineWidth = 1;

  // V·∫Ω ƒë∆∞·ªùng ngang v√† s·ªë ƒëi·ªÉm
  for (let i = 0; i <= totalPoints; i++) {
    const y = i * gridSize;
    const points = 18 - i; // ƒêi·ªÉm t∆∞∆°ng ·ª©ng (t·ª´ 18 xu·ªëng 3)

    ctx.beginPath();
    ctx.moveTo(0, y);
    ctx.lineTo(width, y);
    ctx.stroke();

    // Hi·ªÉn th·ªã s·ªë ƒëi·ªÉm b√™n tr√°i ƒë·ªì th·ªã
    if (points >= 3 && points <= 18) {
      ctx.fillStyle = "#ffffff";
      ctx.font = "bold 14px Arial";
      ctx.textAlign = "right";
      ctx.textBaseline = "middle";
      ctx.fillText(points.toString(), -10, y);
    }
  }

  // V·∫Ω ƒë∆∞·ªùng d·ªçc
  for (let x = step; x < width; x += step) {
    ctx.beginPath();
    ctx.moveTo(x, 0);
    ctx.lineTo(x, height);
    ctx.stroke();
  }

  // V·∫Ω ti√™u ƒë·ªÅ
  ctx.font = "bold 20px Arial";
  ctx.fillStyle = "#FFFFFF";
  ctx.textAlign = "center";
  ctx.fillText(`Th·ªëng K√™ T√†i/X·ªâu - ${nameServer}`, width / 2, -26);

  // V·∫Ω ƒë∆∞·ªùng k·∫øt n·ªëi c√°c ƒëi·ªÉm tr∆∞·ªõc khi v·∫Ω c√°c ƒëi·ªÉm
  ctx.beginPath();
  ctx.strokeStyle = "rgba(255, 255, 255, 0.3)"; // M√†u tr·∫Øng m·ªù
  ctx.lineWidth = 2;
  ctx.setLineDash([5, 5]); // ƒê∆∞·ªùng n√©t ƒë·ª©t

  const reversedHistory = [...history].slice(0, maxHistory).reverse();

  reversedHistory.forEach((result, index) => {
    const x = index * step;
    const y = ((18 - result.total) * height) / totalPoints;

    if (index === 0) {
      ctx.moveTo(x, y);
    } else {
      ctx.lineTo(x, y);
    }
  });
  ctx.stroke();
  ctx.setLineDash([]); // Reset ƒë∆∞ng n√©t ƒë·ª©t

  // V·∫Ω c√°c ƒëi·ªÉm k·∫øt qu·∫£
  reversedHistory.forEach((result, index) => {
    const x = index * step;
    const y = ((18 - result.total) * height) / totalPoints;

    // V·∫Ω v√≤ng tr√≤n n·ªÅn
    ctx.beginPath();
    ctx.arc(x, y, 18, 0, Math.PI * 2);
    ctx.fillStyle = "rgba(0, 0, 0, 0.7)";
    ctx.fill();
    ctx.strokeStyle = result.total > 10 ? "#ff0000" : "#00ffff";
    ctx.lineWidth = 2;
    ctx.stroke();

    // V·∫Ω ƒëi·ªÉm ƒë√°nh d·∫•u
    ctx.beginPath();
    ctx.arc(x, y, 15, 0, Math.PI * 2);
    ctx.fillStyle = result.total > 10 ? "#ff0000" : "#00ffff";
    ctx.fill();

    // Hi·ªÉn th·ªã t·ªïng ƒëi·ªÉm
    ctx.font = "bold 16px Arial";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.strokeStyle = "#000000";
    ctx.lineWidth = 4;
    ctx.strokeText(result.total.toString(), x, y);
    ctx.fillStyle = "#ffffff";
    ctx.fillText(result.total.toString(), x, y);

    // V·∫Ω ƒë∆∞·ªùng n·ªëi v·ªõi ƒëi·ªÉm ti·∫øp theo n·∫øu c√≥
    if (index < reversedHistory.length - 1) {
      const nextResult = reversedHistory[index + 1];
      const nextX = (index + 1) * step;
      const nextY = ((18 - nextResult.total) * height) / totalPoints;

      // V·∫Ω m≈©i t√™n ch·ªâ h∆∞·ªõng
      const angle = Math.atan2(nextY - y, nextX - x);
      const arrowLength = 10;
      const arrowWidth = 5;

      ctx.beginPath();
      ctx.moveTo(
        x + Math.cos(angle) * 20, // ƒêi·ªÉm b·∫Øt ƒë·∫ßu t·ª´ m√©p v√≤ng tr√≤n
        y + Math.sin(angle) * 20
      );
      ctx.lineTo(
        nextX - Math.cos(angle) * 20, // ƒêi·ªÉm k·∫øt th√∫c tr∆∞·ªõc v√≤ng tr√≤n ti·∫øp theo
        nextY - Math.sin(angle) * 20
      );

      // V·∫Ω m≈©i t√™n
      const midX = (x + nextX) / 2;
      const midY = (y + nextY) / 2;

      ctx.moveTo(midX, midY);
      ctx.lineTo(midX - arrowLength * Math.cos(angle - Math.PI / 6), midY - arrowLength * Math.sin(angle - Math.PI / 6));
      ctx.moveTo(midX, midY);
      ctx.lineTo(midX - arrowLength * Math.cos(angle + Math.PI / 6), midY - arrowLength * Math.sin(angle + Math.PI / 6));

      // M√†u ƒë∆∞·ªùng n·ªëi d·ª±a tr√™n k·∫øt qu·∫£ hi·ªán t·∫°i v√† ti·∫øp theo
      const gradient = ctx.createLinearGradient(x, y, nextX, nextY);
      gradient.addColorStop(0, result.total > 10 ? "#ff0000" : "#00ffff");
      gradient.addColorStop(1, nextResult.total > 10 ? "#ff0000" : "#00ffff");

      ctx.strokeStyle = gradient;
      ctx.lineWidth = 2;
      ctx.stroke();
    }
  });

  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ƒë∆∞·ªùng ph√¢n chia T√†i/X·ªâu
  const taiXiuLine = ((18 - 10.5) * height) / totalPoints;
  ctx.beginPath();
  ctx.strokeStyle = "rgba(255, 255, 0, 0.5)";
  ctx.setLineDash([5, 5]);
  ctx.moveTo(0, taiXiuLine);
  ctx.lineTo(width, taiXiuLine);
  ctx.stroke();
  ctx.setLineDash([]);

  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ch√∫ th√≠ch T√†i/X·ªâu
  ctx.font = "bold 14px Arial";
  ctx.textBaseline = "middle";
  ctx.fillStyle = "#ff0000";
  ctx.textAlign = "left";
  ctx.fillText("T√ÄI", 5, taiXiuLine - gridSize / 2);
  ctx.fillStyle = "#00ffff";
  ctx.fillText("X·ªàU", 5, taiXiuLine + gridSize / 2);
}

function drawDicePathGraph(ctx, history, width, height, maxHistory = 20) {
  const step = width / (maxHistory - 1);
  const padding = 20;
  const gridSize = height / 6;

  // V·∫Ω khung ƒë·ªì th·ªã
  ctx.strokeStyle = "#333333";
  ctx.lineWidth = 1;
  ctx.strokeRect(0, 0, width, height);

  // V·∫Ω l∆∞·ªõi √¥ vu√¥ng v·ªõi m√†u s√°ng h∆°n
  ctx.strokeStyle = "rgba(255, 255, 255, 0.2)";
  ctx.lineWidth = 1;

  // V·∫Ω ƒë∆∞·ªùng ngang
  for (let y = gridSize; y < height; y += gridSize) {
    ctx.beginPath();
    ctx.moveTo(0, y);
    ctx.lineTo(width, y);
    ctx.stroke();
  }

  // V·∫Ω ƒë∆∞·ªùng d·ªçc
  for (let x = step; x < width; x += step) {
    ctx.beginPath();
    ctx.moveTo(x, 0);
    ctx.lineTo(x, height);
    ctx.stroke();
  }

  // V·∫Ω ti√™u ƒë·ªÅ
  ctx.font = "bold 20px Arial";
  ctx.fillStyle = "#FFFFFF";
  ctx.textAlign = "center";
  ctx.fillText("ƒê∆∞·ªùng ƒëi c·ªßa 3 x√∫c s·∫Øc", width / 2, -10);

  const colors = ["#ff0000", "#00ff00", "#0000ff"];
  const reversedHistory = [...history].slice(0, maxHistory).reverse();

  // V·∫Ω ƒëi·ªÉm ƒë√°nh d·∫•u v√† s·ªë tr∆∞·ªõc
  reversedHistory.forEach((result, index) => {
    // T·∫°o m·∫£ng ƒë·ªÉ l∆∞u c√°c v·ªã tr√≠ ƒë√£ v·∫Ω t·∫°i m·ªói ƒëi·ªÉm x
    const usedPositions = new Map();

    result.dice.forEach((value, diceIndex) => {
      const x = index * step;
      let y = height - (value / 6) * height;

      // Ki·ªÉm tra xem ƒë√£ c ƒëi·ªÉm n√†o ·ªü v·ªã tr√≠ y n√†y ch∆∞a
      if (usedPositions.has(y)) {
        const offset = 15;
        const direction = diceIndex % 2 === 0 ? 1 : -1;
        y += offset * direction;
      }
      usedPositions.set(y, true);

      // V·∫Ω v√≤ng tr√≤n n·ªÅn l·ªõn h∆°n
      ctx.beginPath();
      ctx.arc(x, y, 15, 0, Math.PI * 2); // TƒÉng k√≠ch th∆∞·ªõc t·ª´ 12 l√™n 15
      ctx.fillStyle = "rgba(0, 0, 0, 0.7)"; // TƒÉng ƒë·ªô ƒë·∫≠m c·ªßa n·ªÅn
      ctx.fill();
      ctx.strokeStyle = colors[diceIndex];
      ctx.lineWidth = 2;
      ctx.stroke();

      // V·∫Ω ƒëi·ªÉm ƒë√°nh d·∫•u
      ctx.beginPath();
      ctx.arc(x, y, 12, 0, Math.PI * 2); // TƒÉng k√≠ch th∆∞·ªõc t·ª´ 8 l√™n 12
      ctx.fillStyle = colors[diceIndex];
      ctx.fill();

      // Hi·ªÉn th·ªã gi√° tr·ªã x√∫c s·∫Øc v·ªõi vi·ªÅn ƒëen v√† font l·ªõn h∆°n
      ctx.font = "bold 16px Arial"; // TƒÉng k√≠ch th∆∞·ªõc font t·ª´ 12px l√™n 16px
      ctx.textAlign = "center";
      ctx.strokeStyle = "#000000";
      ctx.lineWidth = 4; // TƒÉng ƒë·ªô d√†y vi·ªÅn
      ctx.strokeText(value.toString(), x, y + 6);
      ctx.fillStyle = "#ffffff";
      ctx.fillText(value.toString(), x, y + 6);
    });
  });

  // V·∫Ω ƒë∆∞·ªùng k·∫øt n·ªëi sau khi ƒë√£ v·∫Ω t·∫•t c·∫£ c√°c ƒëi·ªÉm
  colors.forEach((color, diceIndex) => {
    ctx.beginPath();
    ctx.strokeStyle = color;
    ctx.lineWidth = 2;
    ctx.globalAlpha = 0.5; // L√†m m·ªù ƒë∆∞·ªùng k·∫øt n·ªëi

    let firstPoint = true;
    reversedHistory.forEach((result, index) => {
      const x = index * step;
      let y = height - (result.dice[diceIndex] / 6) * height;

      // ƒêi·ªÅu ch·ªânh y n·∫øu c√≥ ƒëi·ªÉm tr√πng
      const sameValueIndices = result.dice
        .map((val, idx) => ({ val, idx }))
        .filter((item) => item.val === result.dice[diceIndex])
        .map((item) => item.idx);

      if (sameValueIndices.length > 1) {
        const offset = 15;
        const direction = diceIndex % 2 === 0 ? 1 : -1;
        y += offset * direction;
      }

      if (firstPoint) {
        ctx.moveTo(x, y);
        firstPoint = false;
      } else {
        ctx.lineTo(x, y);
      }
    });
    ctx.stroke();
    ctx.globalAlpha = 1; // Kh√¥i ph·ª•c ƒë·ªô trong su·ªët
  });

  // V·∫Ω ch√∫ th√≠ch
  const legend = ["X√∫c s·∫Øc 1", "X√∫c s·∫Øc 2", "X√∫c s·∫Øc 3"];
  const legendStartX = width * 0.02;
  const legendY = height + 10;
  const legendSpacing = 120;
  const legendBoxSize = 20;

  legend.forEach((text, index) => {
    const x = legendStartX + index * legendSpacing;

    // V·∫Ω h·ªôp m√†u v·ªõi vi·ªÅn ƒëen
    ctx.fillStyle = colors[index];
    ctx.fillRect(x, legendY, legendBoxSize, legendBoxSize);
    ctx.strokeStyle = "#000000";
    ctx.lineWidth = 2;
    ctx.strokeRect(x, legendY, legendBoxSize, legendBoxSize);

    // V·∫Ω ch·ªØ v·ªõi vi·ªÅn ƒëen ƒë·ªÉ d·ªÖ ƒë·ªçc
    ctx.font = "bold 16px Arial";
    ctx.textAlign = "left";

    // V·∫Ω vi·ªÅn ƒëen cho ch·ªØ
    ctx.strokeStyle = "#000000";
    ctx.lineWidth = 3;
    ctx.strokeText(text, x + legendBoxSize + 10, legendY + legendBoxSize / 2 + 5);

    // V·∫Ω ch·ªØ
    ctx.fillStyle = "#ffffff";
    ctx.fillText(text, x + legendBoxSize + 10, legendY + legendBoxSize / 2 + 5);
  });
}

// Th√™m h√†m m·ªõi ƒë·ªÉ v·∫Ω k·∫øt qu·∫£ Vietlott
export async function createVietlott655ResultImage(mainNumbers, extraNumber, isJackpot = false) {
  const width = 800;
  const height = 200;
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  // V·∫Ω background gradient
  const gradient = ctx.createLinearGradient(0, 0, 0, height);
  gradient.addColorStop(0, "#1a237e");
  gradient.addColorStop(1, "#0d47a1");
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);

  // V·∫Ω hi·ªáu ·ª©ng √°nh s√°ng n·∫øu tr√∫ng jackpot
  if (isJackpot) {
    const lightGradient = ctx.createRadialGradient(width/2, height/2, 0, width/2, height/2, Math.max(width, height));
    lightGradient.addColorStop(0, "rgba(255, 215, 0, 0.3)");
    lightGradient.addColorStop(1, "rgba(255, 215, 0, 0)");
    ctx.fillStyle = lightGradient;
    ctx.fillRect(0, 0, width, height);
  }

  // C·∫•u h√¨nh cho c√°c vi√™n bi
  const circleRadius = 35;
  const spacing = 90; // Kho·∫£ng c√°ch gi·ªØa c√°c bi
  
  // T√≠nh to√°n t·ªïng chi·ªÅu r·ªông c·∫ßn thi·∫øt cho t·∫•t c·∫£ 7 bi
  const totalWidth = spacing * 6; // 6 kho·∫£ng c√°ch cho 7 bi
  const startX = (width - totalWidth) / 2; // ƒêi·ªÉm b·∫Øt ƒë·∫ßu ƒë·ªÉ cƒÉn gi·ªØa t·∫•t c·∫£ 7 bi
  const centerY = height / 2;

  // V·∫Ω t·∫•t c·∫£ 7 bi (6 bi ch√≠nh + 1 bi ph·ª•)
  const allNumbers = [...mainNumbers, extraNumber];
  
  allNumbers.forEach((number, index) => {
    const x = startX + (spacing * index);
    const isExtraNumber = index === 6; // Ki·ªÉm tra c√≥ ph·∫£i l√† s·ªë ph·ª• kh√¥ng
    
    // V·∫Ω h√¨nh tr√≤n
    ctx.beginPath();
    ctx.arc(x, centerY, circleRadius, 0, Math.PI * 2);
    ctx.fillStyle = isExtraNumber ? "#ffd700" : "#d32f2f"; // M√†u v√†ng cho s·ªë ph·ª•, ƒë·ªè cho s·ªë ch√≠nh
    ctx.fill();

    // Th√™m vi·ªÅn tr·∫Øng
    ctx.strokeStyle = "#ffffff";
    ctx.lineWidth = 2;
    ctx.stroke();

    // V·∫Ω s·ªë v·ªõi m√†u t∆∞∆°ng ·ª©ng
    ctx.font = "bold 32px BeVietnamPro";
    ctx.fillStyle = isExtraNumber ? "#000000" : "#ffffff"; // M√†u ƒëen cho s·ªë ph·ª•, tr·∫Øng cho s·ªë ch√≠nh
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText(number.toString(), x, centerY);
  });

  // L∆∞u canvas th√†nh file ·∫£nh
  const fileName = `vietlott655_result_${Date.now()}.png`;
  const filePath = path.resolve(`./assets/temp/${fileName}`);
  await fs.writeFile(filePath, canvas.toBuffer());

  return filePath;
}

// Th√™m h√†m v·∫Ω ·∫£nh ch·ªù cho Vietlott
export async function createVietlott655WaitingImage(remainingSeconds, totalPlayers, totalBets, jackpotAmount) {
  const width = 600;
  const height = 300;
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext("2d");

  // V·∫Ω background gradient
  const gradient = ctx.createLinearGradient(0, 0, 0, height);
  gradient.addColorStop(0, "#1a237e");
  gradient.addColorStop(1, "#0d47a1");
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);

  // Th√™m hi·ªáu ·ª©ng l·∫•p l√°nh
  for (let i = 0; i < 50; i++) {
    const x = Math.random() * width;
    const y = Math.random() * height;
    const radius = Math.random() * 1.5;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.5})`;
    ctx.fill();
  }

  // V·∫Ω ti√™u ƒë·ªÅ
  ctx.font = "bold 40px BeVietnamPro";
  ctx.fillStyle = "#ffffff";
  ctx.textAlign = "center";
  ctx.fillText("VIETLOTT 6/55", width / 2, height / 5);

  // V·∫Ω th·ªùi gian c√≤n l·∫°i
  const minutes = Math.floor(remainingSeconds / 60);
  const seconds = remainingSeconds % 60;
  const timeText = `${minutes}:${seconds.toString().padStart(2, "0")}`;

  ctx.font = "bold 60px BeVietnamPro";
  ctx.fillStyle = "#ffd700";
  ctx.fillText(timeText, width / 2, height / 2);

  // V·∫Ω th√¥ng tin ng∆∞·ªùi ch∆°i v√† t·ªïng ti·ªÅn c∆∞·ª£c
  ctx.font = "bold 24px BeVietnamPro";
  ctx.fillStyle = "#ffffff";

  // Th√™m hi·ªáu ·ª©ng vi·ªÅn cho text
  const drawTextWithShadow = (text, x, y) => {
    ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
    ctx.shadowBlur = 5;
    ctx.shadowOffsetX = 2;
    ctx.shadowOffsetY = 2;
    ctx.fillText(text, x, y);
    ctx.shadowColor = "transparent";
  };

  // V·∫Ω th√¥ng tin v·ªõi kho·∫£ng c√°ch ƒë·ªÅu nhau
  const startY = height / 2 + 50;
  const lineHeight = 35;

  drawTextWithShadow(`S·ªë ng∆∞·ªùi tham gia: ${totalPlayers}`, width / 2, startY);
  drawTextWithShadow(`T·ªïng ti·ªÅn c∆∞·ª£c: ${formatCurrency(totalBets)} VNƒê`, width / 2, startY + lineHeight);

  // Th√™m d√≤ng ti·ªÅn h≈© v·ªõi gradient m√†u v√†ng
  const jackpotGradient = ctx.createLinearGradient(width / 4, startY + lineHeight * 2, (width * 3) / 4, startY + lineHeight * 2 + 30);
  jackpotGradient.addColorStop(0, "#FFD700");
  jackpotGradient.addColorStop(0.5, "#FFF8DC");
  jackpotGradient.addColorStop(1, "#FFD700");

  ctx.font = "bold 28px BeVietnamPro"; // TƒÉng k√≠ch th∆∞·ªõc font cho d√≤ng ti·ªÅn h≈©
  ctx.fillStyle = jackpotGradient;
  drawTextWithShadow(`üí∞ Ti·ªÅn h≈©: ${formatCurrency(jackpotAmount)} VNƒê`, width / 2, startY + lineHeight * 2);

  // L∆∞u canvas th√†nh file ·∫£nh
  const fileName = `vietlott655_waiting_${Date.now()}.png`;
  const filePath = path.resolve(`./assets/temp/${fileName}`);
  await fs.writeFile(filePath, canvas.toBuffer());

  return filePath;
}
